// server-clean.js - Vers√£o limpa com parser ultra-seguro
import express from "express";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import fetch from "node-fetch";

// üîë IMPORTANTE: Carregar .env ANTES de importar outros m√≥dulos
dotenv.config();

// Rotas principais
import analyzeRoute from "./api/audio/analyze.js";
import jobsRoute from "./api/jobs/[id].js"; 

console.log("üìÇ Arquivo .env carregado");
console.log("üóÑÔ∏è DATABASE_URL:", process.env.DATABASE_URL ? "‚úÖ Configurada" : "‚ùå N√£o configurada");

const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Middlewares
app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ extended: true, limit: "50mb" }));

// üëâ ROTA RAIZ PRIMEIRO: abre a landing
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "landing.html"));
});

// üëâ Aliases para o app (index)
app.get(["/index", "/index.html", "/app", "/home"], (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// üëâ Servir arquivos est√°ticos SEM index autom√°tico
app.use(
  express.static(path.join(__dirname, "public"), {
    index: false,
  })
);

// Rotas da API
import cancelSubscriptionRoute from "./api/cancel-subscription.js";
import chatWithImagesRoute from "./api/chat-with-images.js";
import chatRoute from "./api/chat.js";
import createPreferenceRoute from "./api/create-preference.js";
import deleteAccountRoute from "./api/delete-account.js";
import mercadopagoRoute from "./api/mercadopago.js";
import uploadAudioRoute from "./api/upload-audio.js";
import uploadImageRoute from "./api/upload-image.js";
import voiceMessageRoute from "./api/voice-message.js";
import webhookRoute from "./api/webhook.js";
import presignRoute from "./api/presign.js";

app.use("/api/cancel-subscription", cancelSubscriptionRoute);
app.use("/api/chat-with-images", chatWithImagesRoute);
app.use("/api/chat", chatRoute);
app.use("/api/create-preference", createPreferenceRoute);
app.use("/api/delete-account", deleteAccountRoute);
app.use("/api/mercadopago", mercadopagoRoute);
app.use("/api/upload-audio", uploadAudioRoute);
app.use("/api/upload", uploadImageRoute);
app.use("/api/voice", voiceMessageRoute);
app.use("/api/webhook", webhookRoute);
app.use("/api", presignRoute);

// Rotas de an√°lise
app.use("/api/audio", analyzeRoute);
app.use("/api/jobs", jobsRoute);

// üîß FUN√á√ÉO ULTRA-SEGURA para parse de resposta da IA
function safeParseAIResponse(rawResponse, originalSuggestions, context = 'AI-PROCESSING') {
  const expectedCount = originalSuggestions.length;
  console.log(`ü§ñ [${context}] Iniciando parse ultra-seguro: ${expectedCount} sugest√µes esperadas`);
  
  if (!rawResponse || typeof rawResponse !== 'string') {
    console.error(`‚ùå [${context}] Resposta inv√°lida ou vazia`);
    return createFullFallback(originalSuggestions, context);
  }
  
  console.log(`üîç [${context}] Resposta bruta recebida (${rawResponse.length} chars)`);
  
  try {
    // PASSO 1: LIMPEZA AGRESSIVA
    let cleanResponse = rawResponse.trim();
    
    // Remover markdown/formata√ß√£o
    cleanResponse = cleanResponse.replace(/```json\\s*|\\s*```/g, '');
    cleanResponse = cleanResponse.replace(/```\\s*|\\s*```/g, '');
    
    // Encontrar in√≠cio e fim do JSON
    const jsonStart = cleanResponse.indexOf('{');
    const jsonEnd = cleanResponse.lastIndexOf('}') + 1;
    
    if (jsonStart === -1 || jsonEnd <= jsonStart) {
      console.warn(`‚ö†Ô∏è [${context}] N√£o encontrou objeto JSON v√°lido na resposta`);
      return createFullFallback(originalSuggestions, context);
    }
    
    cleanResponse = cleanResponse.substring(jsonStart, jsonEnd);
    console.log(`üßπ [${context}] JSON limpo extra√≠do (${cleanResponse.length} chars)`);
    
    // PASSO 2: TENTATIVA DE PARSE DIRETO
    let parsed;
    try {
      parsed = JSON.parse(cleanResponse);
      console.log(`‚úÖ [${context}] Parse direto bem-sucedido`);
    } catch (parseError) {
      console.warn(`‚ö†Ô∏è [${context}] Parse direto falhou: ${parseError.message}`);
      console.log(`üîß [${context}] Aplicando corre√ß√µes autom√°ticas...`);
      
      // PASSO 3: CORRE√á√ïES AUTOM√ÅTICAS
      let fixedResponse = fixTruncatedJSON(cleanResponse, context);
      
      try {
        parsed = JSON.parse(fixedResponse);
        console.log(`‚úÖ [${context}] Parse corrigido bem-sucedido`);
      } catch (secondError) {
        console.error(`‚ùå [${context}] Parse falhou mesmo ap√≥s corre√ß√µes: ${secondError.message}`);
        return createFullFallback(originalSuggestions, context);
      }
    }
    
    // PASSO 4: VALIDA√á√ÉO DE ESTRUTURA
    if (!parsed || typeof parsed !== 'object') {
      console.error(`‚ùå [${context}] Resposta parseada n√£o √© um objeto v√°lido`);
      return createFullFallback(originalSuggestions, context);
    }
    
    // Tentar extrair sugest√µes de diferentes estruturas poss√≠veis
    let aiSuggestions = parsed.suggestions || parsed.enhanced_suggestions || parsed.results || [];
    
    if (!Array.isArray(aiSuggestions)) {
      console.error(`‚ùå [${context}] Sugest√µes n√£o est√£o em formato de array`);
      return createFullFallback(originalSuggestions, context);
    }
    
    const receivedCount = aiSuggestions.length;
    console.log(`üìä [${context}] Parse completo: ${receivedCount}/${expectedCount} sugest√µes`);
    
    // PASSO 5: COMPLETAMENTO AUTOM√ÅTICO SE NECESS√ÅRIO
    if (expectedCount > 0 && receivedCount < expectedCount) {
      console.warn(`‚ö†Ô∏è [${context}] RESPOSTA INCOMPLETA: Completando ${expectedCount - receivedCount} sugest√µes`);
      
      for (let i = receivedCount; i < expectedCount; i++) {
        const originalSuggestion = originalSuggestions[i];
        const fallbackSuggestion = createFallbackSuggestion(originalSuggestion, i, context);
        aiSuggestions.push(fallbackSuggestion);
        console.log(`üîß [${context}] Sugest√£o ${i + 1} completada com fallback estruturado`);
      }
    }
    
    // PASSO 6: VALIDA√á√ÉO FINAL
    if (expectedCount > 0 && aiSuggestions.length !== expectedCount) {
      console.error(`‚ùå [${context}] ERRO CR√çTICO: ${aiSuggestions.length} !== ${expectedCount}`);
      return createFullFallback(originalSuggestions, context);
    }
    
    console.log(`‚úÖ [${context}] Parse ultra-seguro conclu√≠do: ${aiSuggestions.length} sugest√µes processadas`);
    return aiSuggestions;
    
  } catch (criticalError) {
    console.error(`‚ùå [${context}] Erro cr√≠tico durante parse ultra-seguro:`, criticalError.message);
    return createFullFallback(originalSuggestions, context);
  }
}

// üîß Fun√ß√£o para corrigir JSON truncado de forma mais inteligente
function fixTruncatedJSON(jsonString, context = 'JSON-FIX') {
  console.log(`üîß [${context}] Iniciando corre√ß√£o autom√°tica de JSON truncado...`);
  
  let fixed = jsonString;
  
  // Remover v√≠rgulas problem√°ticas antes de fechamentos
  fixed = fixed.replace(/,(\\s*[}\\]])/g, '$1');
  
  // Remover v√≠rgulas no final de strings sem fechamento
  fixed = fixed.replace(/,(\\s*)$/g, '$1');
  
  // Contar n√≠veis de abertura para saber o que precisa fechar
  let braceLevel = 0;
  let bracketLevel = 0;
  let inString = false;
  let escapeNext = false;
  
  for (let i = 0; i < fixed.length; i++) {
    const char = fixed[i];
    
    if (escapeNext) {
      escapeNext = false;
      continue;
    }
    
    if (char === '\\\\') {
      escapeNext = true;
      continue;
    }
    
    if (char === '"' && !escapeNext) {
      inString = !inString;
      continue;
    }
    
    if (!inString) {
      if (char === '{') braceLevel++;
      if (char === '}') braceLevel--;
      if (char === '[') bracketLevel++;
      if (char === ']') bracketLevel--;
    }
  }
  
  // Fechar objetos abertos
  while (braceLevel > 0) {
    fixed += '}';
    braceLevel--;
    console.log(`üîß [${context}] Fechando objeto aberto`);
  }
  
  // Fechar arrays abertos
  while (bracketLevel > 0) {
    fixed += ']';
    bracketLevel--;
    console.log(`üîß [${context}] Fechando array aberto`);
  }
  
  // Se terminou com v√≠rgula, remover
  fixed = fixed.replace(/,(\\s*)$/, '$1');
  
  console.log(`üîß [${context}] Corre√ß√£o autom√°tica aplicada`);
  return fixed;
}

// üõ°Ô∏è Criar fallback completo quando parse falha totalmente
function createFullFallback(originalSuggestions, context = 'FALLBACK') {
  if (!originalSuggestions || !Array.isArray(originalSuggestions)) {
    console.error(`‚ùå [${context}] Sem sugest√µes originais para fallback`);
    return [];
  }
  
  const fallbackSuggestions = originalSuggestions.map((suggestion, index) => 
    createFallbackSuggestion(suggestion, index, context)
  );
  
  console.log(`üõ°Ô∏è [${context}] Fallback completo criado: ${fallbackSuggestions.length} sugest√µes estruturadas`);
  return fallbackSuggestions;
}

// üîß Criar sugest√£o de fallback estruturada
function createFallbackSuggestion(originalSuggestion, index, context = 'FALLBACK') {
  return {
    blocks: {
      problem: `‚ö†Ô∏è ${originalSuggestion?.message || originalSuggestion?.title || \`Problema \${index + 1} detectado pelo sistema\`}`,
      cause: 'üéØ An√°lise autom√°tica identificou desvio dos padr√µes t√©cnicos profissionais de refer√™ncia',
      solution: `üõ†Ô∏è ${originalSuggestion?.action || originalSuggestion?.description || 'Aplicar corre√ß√£o recomendada pelo sistema de an√°lise'}`,
      tip: 'üí° Teste o resultado em diferentes sistemas de reprodu√ß√£o para validar a melhoria aplicada',
      plugin: 'üéπ Utilize EQ/Compressor nativo da sua DAW ou plugins gratuitos como ReaEQ, ReaComp',
      result: '‚úÖ Melhor qualidade sonora geral e maior compatibilidade com padr√µes profissionais da ind√∫stria'
    },
    metadata: {
      priority: originalSuggestion?.priority || 'm√©dia',
      difficulty: 'intermedi√°rio',
      confidence: originalSuggestion?.confidence || 0.7,
      frequency_range: originalSuggestion?.frequency_range || 'espectro completo',
      processing_type: 'Corre√ß√£o geral',
      genre_specific: 'Aplic√°vel universalmente a todos os g√™neros musicais'
    },
    aiEnhanced: false // Marcado como n√£o-enriquecido pela IA
  };
}

// üöÄ CONSTRU√á√ÉO DO PROMPT PARA IA
function buildSuggestionPrompt(suggestions, metrics, genre) {
  const suggestionList = suggestions.map((s, i) => 
    `${i+1}. ${s.message || s.title || s.description || 'Problema detectado'}`
  ).join('\\n');
  
  return `Analise esses ${suggestions.length} problemas de √°udio detectados e forne√ßa sugest√µes educativas para cada um:

PROBLEMAS DETECTADOS:
${suggestionList}

G√äNERO MUSICAL: ${genre || 'n√£o especificado'}

RESPONDA em JSON exatamente neste formato:
{
  "suggestions": [
    {
      "blocks": {
        "problem": "‚ö†Ô∏è [descri√ß√£o clara do problema]",
        "cause": "üéØ [explica√ß√£o t√©cnica simples da causa]",
        "solution": "üõ†Ô∏è [passo a passo pr√°tico para resolver]",
        "tip": "üí° [dica extra ou considera√ß√£o criativa]",
        "plugin": "üéπ [exemplo de plugin/ferramenta espec√≠fica]",
        "result": "‚úÖ [o que vai melhorar no som]"
      },
      "metadata": {
        "priority": "alta|m√©dia|baixa",
        "difficulty": "iniciante|intermedi√°rio|avan√ßado",
        "confidence": 0.8,
        "frequency_range": "[faixa de frequ√™ncia afetada]",
        "processing_type": "[tipo de processamento]",
        "genre_specific": "[considera√ß√µes espec√≠ficas do g√™nero]"
      }
    }
  ]
}`;
}

// üöÄ ENDPOINT PRINCIPAL DE SUGEST√ïES IA
app.post("/api/suggestions", async (req, res) => {
  try {
    const { suggestions, metrics, genre } = req.body;

    console.log(`üöÄ [AI-API] Recebidas ${suggestions?.length || 0} sugest√µes para processamento`);

    // Valida√ß√£o dos dados de entrada
    if (!suggestions || !Array.isArray(suggestions) || suggestions.length === 0) {
      console.error("‚ùå [AI-API] Lista de sugest√µes inv√°lida");
      return res.status(400).json({ 
        error: "Lista de sugest√µes √© obrigat√≥ria e n√£o pode estar vazia",
        received: suggestions
      });
    }

    // Se n√£o tiver API key, retornar erro (n√£o fallback)
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey || openaiApiKey === 'your_openai_api_key_here') {
      console.error("‚ö†Ô∏è [AI-API] OpenAI API Key n√£o configurada");
      return res.status(503).json({
        success: false,
        error: 'API Key da IA n√£o configurada',
        source: 'error',
        message: 'Configure OPENAI_API_KEY nas vari√°veis de ambiente'
      });
    }

    console.log(`üìã [AI-API] Construindo prompt para ${suggestions.length} sugest√µes do g√™nero: ${genre || 'geral'}`);

    // Construir prompt para TODAS as sugest√µes
    const prompt = buildSuggestionPrompt(suggestions, metrics, genre);

    console.log(`ü§ñ [AI-API] Enviando prompt para OpenAI...`);

    // Chamar OpenAI
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': \`Bearer \${openaiApiKey}\`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: process.env.AI_MODEL || 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: \`üéµ VOC√ä √â UM ASSISTENTE DE MIXAGEM E MASTERIZA√á√ÉO MUSICAL ULTRA-AVAN√áADO

üéØ SUA MISS√ÉO:
Analisar os PROBLEMAS de √°udio detectados e gerar sugest√µes EDUCATIVAS, claras e aplic√°veis para o usu√°rio.

üìã ESTRUTURA OBRIGAT√ìRIA para cada sugest√£o:

‚ö†Ô∏è Problema: [descri√ß√£o curta e clara]
üéØ Causa Prov√°vel: [explica√ß√£o t√©cnica simples, sem jarg√£o pesado]
üõ†Ô∏è Solu√ß√£o Pr√°tica: [passo a passo direto que pode ser feito em qualquer DAW]
üí° Dica Extra: [truque avan√ßado ou considera√ß√£o criativa]
üéπ Exemplo de Plugin/Ferramenta: [cite pelo menos 1 plugin popular ou gratuito que ajude]
‚úÖ Resultado Esperado: [explique de forma motivadora o que vai melhorar no som]

üî• REGRAS DE OURO:
- Escreva de forma educativa e motivadora, sem ser r√≠gido
- Use linguagem simples, mas com conte√∫do t√©cnico real
- Sempre que poss√≠vel, d√™ refer√™ncias a g√™neros musicais (Funk, Trap, Eletr√¥nico, etc.)
- Sa√≠da formatada em blocos claros com emojis para facilitar leitura
- Seja pr√°tico: usu√°rio deve conseguir aplicar HOJE no seu projeto

üöÄ RESPONDA SEMPRE EM JSON PURO, SEM EXPLICA√á√ïES EXTRAS.\`
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        temperature: parseFloat(process.env.AI_TEMPERATURE || '0.3'),
        max_tokens: parseInt(process.env.AI_MAX_TOKENS || '3000'),
        top_p: 0.9,
        frequency_penalty: 0.1,
        presence_penalty: 0.1
      })
    });

    if (!openaiResponse.ok) {
      console.error("‚ùå Erro na API da OpenAI:", openaiResponse.status, openaiResponse.statusText);
      throw new Error(\`OpenAI API retornou \${openaiResponse.status}\`);
    }

    const openaiData = await openaiResponse.json();
    const aiSuggestion = openaiData.choices[0]?.message?.content;

    if (!aiSuggestion) {
      throw new Error('Resposta vazia da IA');
    }

    console.log(\`üîç [AI-PROCESSING] Resposta bruta da IA recebida (\${aiSuggestion.length} chars)\`);

    // üö® PARSE ULTRA-SEGURO: Processar resposta da IA com sanitiza√ß√£o e fallback garantido
    const enhancedSuggestions = safeParseAIResponse(aiSuggestion, suggestions, 'AI-SUGGESTIONS-ENDPOINT');

    // üîí VALIDA√á√ÉO FINAL CR√çTICA: Garantir contagem exata antes de retornar
    if (enhancedSuggestions.length !== suggestions.length) {
      console.error(\`‚ùå [AI-API] ERRO CR√çTICO: Contagem final inv√°lida \${enhancedSuggestions.length}/\${suggestions.length}\`);
      throw new Error(\`Contagem final n√£o confere: \${enhancedSuggestions.length}/\${suggestions.length}\`);
    }

    console.log(\`‚úÖ [AI-API] ‚úÖ SUCESSO TOTAL: Processamento conclu√≠do com \${enhancedSuggestions.length} sugest√µes:\`, {
      suggestionsOriginais: suggestions.length,
      suggestionsEnriquecidas: enhancedSuggestions.length,
      sucessoCompleto: enhancedSuggestions.length === suggestions.length ? '‚úÖ SIM' : '‚ùå PARCIAL',
      aiEnriquecidas: enhancedSuggestions.filter(s => s.aiEnhanced === true).length,
      fallbackUsadas: enhancedSuggestions.filter(s => s.aiEnhanced === false).length,
      validacaoFinal: 'CONTAGEM GARANTIDA ‚úÖ'
    });

    res.json({
      success: true,
      enhancedSuggestions,
      source: 'ai',
      message: \`\${enhancedSuggestions.length} sugest√µes enriquecidas pela IA\`,
      metadata: {
        originalCount: suggestions.length,
        enhancedCount: enhancedSuggestions.length,
        genre: genre || 'n√£o especificado',
        processingTime: Date.now(),
        aiSuccess: enhancedSuggestions.length,
        aiErrors: Math.max(0, suggestions.length - enhancedSuggestions.length)
      }
    });

  } catch (error) {
    console.error("‚ùå [AI-API] Erro cr√≠tico no processamento:", error.message);

    // Fallback completo em caso de erro cr√≠tico
    const { suggestions } = req.body;
    if (suggestions && Array.isArray(suggestions)) {
      const fallbackSuggestions = createFullFallback(suggestions, 'AI-ERROR-FALLBACK');
      
      return res.json({
        success: true,
        enhancedSuggestions: fallbackSuggestions,
        source: 'fallback',
        message: \`Processamento falhou, usando \${fallbackSuggestions.length} sugest√µes estruturadas de fallback\`,
        metadata: {
          originalCount: suggestions.length,
          enhancedCount: fallbackSuggestions.length,
          error: error.message,
          fallbackApplied: true
        }
      });
    }

    res.status(500).json({
      success: false,
      error: "Erro interno do servidor",
      message: error.message
    });
  }
});

// üëâ Fallback SPA: qualquer rota n√£o-API cai no app (index.html)
app.get("*", (req, res, next) => {
  if (req.path.startsWith("/api/")) return next();
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// Start
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(\`üöÄ Servidor SoundyAI rodando na porta \${PORT}\`);
});