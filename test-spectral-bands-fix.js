#!/usr/bin/env node

/**
 * üß™ Teste das corre√ß√µes das bandas espectrais
 * Valida se as bandas s√£o calculadas, convertidas para dB e chegam ao JSON
 */

import { SpectralBandsCalculator, SpectralBandsAggregator } from './work/lib/audio/features/spectral-bands.js';

console.log('üß™ [TESTE] Iniciando valida√ß√£o das corre√ß√µes das bandas espectrais...\n');

// Teste 1: Cria√ß√£o do calculador
console.log('1Ô∏è‚É£ Testando cria√ß√£o do calculador...');
const calculator = new SpectralBandsCalculator(48000, 4096);
console.log('‚úÖ Calculador criado com sucesso');

// Teste 2: Gerar espectro sint√©tico (pink noise simulado)
console.log('\n2Ô∏è‚É£ Gerando espectro sint√©tico...');
const fftSize = 4096;
const binCount = Math.floor(fftSize / 2) + 1;

// Simular pink noise: energia inversamente proporcional √† frequ√™ncia
const leftMagnitude = new Float32Array(binCount);
const rightMagnitude = new Float32Array(binCount);

for (let i = 1; i < binCount; i++) {
  // Pink noise: 1/f spectrum
  const energy = 1.0 / Math.sqrt(i + 1);
  const noise = (Math.random() - 0.5) * 0.1;
  leftMagnitude[i] = energy + noise;
  rightMagnitude[i] = energy + noise;
}

console.log(`‚úÖ Espectro sint√©tico gerado: ${binCount} bins`);

// Teste 3: Calcular bandas para um frame
console.log('\n3Ô∏è‚É£ Calculando bandas espectrais...');
const frameResult = calculator.analyzeBands(leftMagnitude, rightMagnitude, 0);

console.log('üìä Resultado do frame:');
console.log(`   Valid: ${frameResult.valid}`);
console.log(`   Total %: ${frameResult.totalPercentage?.toFixed(1) || 'null'}`);

if (frameResult.valid && frameResult.bands) {
  console.log('\nüìà Bandas calculadas:');
  for (const [bandName, band] of Object.entries(frameResult.bands)) {
    console.log(`   ${bandName.padEnd(8)}: ${band.percentage?.toFixed(1) || 'null'}% | ${band.energy_db?.toFixed(1) || 'null'}dB | ${band.status || 'no_status'}`);
  }
} else {
  console.log('‚ùå Frame inv√°lido ou sem bandas');
}

// Teste 4: Agrega√ß√£o de m√∫ltiplos frames
console.log('\n4Ô∏è‚É£ Testando agrega√ß√£o...');
const frames = [frameResult];

// Simular mais alguns frames
for (let i = 1; i < 5; i++) {
  // Adicionar pequena varia√ß√£o
  const variationLeft = leftMagnitude.map(val => val * (1 + (Math.random() - 0.5) * 0.05));
  const variationRight = rightMagnitude.map(val => val * (1 + (Math.random() - 0.5) * 0.05));
  const frameVar = calculator.analyzeBands(variationLeft, variationRight, i);
  if (frameVar.valid) {
    frames.push(frameVar);
  }
}

const aggregatedResult = SpectralBandsAggregator.aggregate(frames);

console.log('üìä Resultado agregado:');
console.log(`   Valid: ${aggregatedResult.valid}`);
console.log(`   Total %: ${aggregatedResult.totalPercentage?.toFixed(1) || 'null'}`);
console.log(`   Frames usados: ${aggregatedResult.framesUsed || 0}`);

if (aggregatedResult.valid && aggregatedResult.bands) {
  console.log('\nüìà Bandas agregadas:');
  for (const [bandName, band] of Object.entries(aggregatedResult.bands)) {
    console.log(`   ${bandName.padEnd(8)}: ${band.percentage?.toFixed(1) || 'null'}% | ${band.energy_db?.toFixed(1) || 'null'}dB | ${band.status || 'no_status'}`);
  }
} else {
  console.log('‚ùå Agrega√ß√£o inv√°lida ou sem bandas');
}

// Teste 5: Simular estrutura que chegaria ao json-output.js
console.log('\n5Ô∏è‚É£ Simulando estrutura para JSON...');
const coreMetricsSimulated = {
  spectralBands: aggregatedResult  // ‚Üê Estrutura corrigida (.bands em vez de .aggregated)
};

// Simular condi√ß√£o do json-output.js
console.log('\nüîç Testando condi√ß√µes de acesso:');
console.log(`   coreMetrics.spectralBands?.bands: ${!!coreMetricsSimulated.spectralBands?.bands}`);
console.log(`   coreMetrics.spectralBands?.aggregated: ${!!coreMetricsSimulated.spectralBands?.aggregated}`);

if (coreMetricsSimulated.spectralBands?.bands) {
  console.log('‚úÖ Condi√ß√£o CORRIGIDA seria TRUE - bandas seriam mapeadas');
  
  // Simular mapeamento
  const b = coreMetricsSimulated.spectralBands;
  const extractedBands = {
    sub: {
      energy_db: b.bands.sub?.energy_db,
      percentage: b.bands.sub?.percentage,
      range: b.bands.sub?.frequencyRange || "20-60Hz",
      status: b.bands.sub?.status || "calculated"
    },
    // ... outras bandas seguiriam o mesmo padr√£o
    _status: 'calculated'
  };
  
  console.log('\nüì§ Estrutura final para JSON:');
  console.log(`   sub: ${extractedBands.sub.percentage?.toFixed(1)}% | ${extractedBands.sub.energy_db?.toFixed(1)}dB | ${extractedBands.sub.status}`);
  console.log(`   Status geral: ${extractedBands._status}`);
  
} else {
  console.log('‚ùå Condi√ß√£o SERIA FALSE - cairia no fallback not_calculated');
}

// Teste 6: Valida√ß√£o final
console.log('\n6Ô∏è‚É£ Valida√ß√£o final...');
let testsPassados = 0;
const totalTests = 5;

// Test 1: Calculator funciona
if (calculator && typeof calculator.analyzeBands === 'function') {
  console.log('‚úÖ Test 1: Calculador criado corretamente');
  testsPassados++;
} else {
  console.log('‚ùå Test 1: Falha na cria√ß√£o do calculador');
}

// Test 2: Frame calculation works
if (frameResult?.valid && frameResult?.bands) {
  console.log('‚úÖ Test 2: C√°lculo de frame funciona');
  testsPassados++;
} else {
  console.log('‚ùå Test 2: Falha no c√°lculo de frame');
}

// Test 3: energy_db is calculated
if (frameResult?.bands?.sub?.energy_db !== undefined && frameResult?.bands?.sub?.energy_db !== null) {
  console.log('‚úÖ Test 3: Convers√£o para dB implementada');
  testsPassados++;
} else {
  console.log('‚ùå Test 3: Convers√£o para dB n√£o encontrada');
}

// Test 4: Aggregation works
if (aggregatedResult?.valid && aggregatedResult?.bands) {
  console.log('‚úÖ Test 4: Agrega√ß√£o funciona');
  testsPassados++;
} else {
  console.log('‚ùå Test 4: Falha na agrega√ß√£o');
}

// Test 5: JSON mapping condition
if (coreMetricsSimulated.spectralBands?.bands) {
  console.log('‚úÖ Test 5: Condi√ß√£o de mapeamento JSON corrigida');
  testsPassados++;
} else {
  console.log('‚ùå Test 5: Condi√ß√£o de mapeamento JSON ainda incorreta');
}

console.log(`\nüìä RESULTADO FINAL: ${testsPassados}/${totalTests} testes passaram`);

if (testsPassados === totalTests) {
  console.log('üéâ TODAS AS CORRE√á√ïES FUNCIONANDO! As bandas espectrais devem aparecer no JSON agora.');
} else {
  console.log('‚ö†Ô∏è  Algumas corre√ß√µes podem precisar de ajustes.');
}

console.log('\nüîó Pr√≥ximos passos:');
console.log('   1. Testar com √°udio real no pipeline completo');
console.log('   2. Verificar se o JSON final no Postgres tem energy_db e percentage');
console.log('   3. Confirmar na UI que as bandas aparecem na tabela de refer√™ncia');