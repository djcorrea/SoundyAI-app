// üî¨ INVESTIGA√á√ÉO DO ARQUIVO PROBLEM√ÅTICO
// An√°lise do arquivo que causa travamento consistente no pipeline

require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function investigateProblematicFile() {
  try {
    console.log('üî¨ INVESTIGA√á√ÉO - ARQUIVO PROBLEM√ÅTICO');
    console.log('====================================\n');
    
    const problematicJobId = '2965c05b-cefe-4e0b-902a-c7908bc44ce2';
    const problematicFileKey = 'uploads/1757557104596.wav';
    
    // 1. Comparar com arquivos que funcionam
    console.log('1Ô∏è‚É£ COMPARANDO COM ARQUIVOS QUE FUNCIONAM...');
    const workingJobs = await pool.query(`
      SELECT id, file_key, status, created_at, 
             EXTRACT(EPOCH FROM (updated_at - created_at)) as processing_seconds
      FROM jobs 
      WHERE status IN ('done', 'completed') 
      AND created_at > NOW() - INTERVAL '24 hours'
      ORDER BY created_at DESC 
      LIMIT 5
    `);
    
    console.log('   ‚úÖ Arquivos que funcionaram recentemente:');
    workingJobs.rows.forEach(job => {
      const processingTime = job.processing_seconds ? parseFloat(job.processing_seconds).toFixed(1) : 'N/A';
      console.log(`      - ${job.file_key}: ${processingTime}s (${job.status})`);
    });
    
    // 2. Analisar padr√µes de nomes de arquivo
    console.log('\n2Ô∏è‚É£ AN√ÅLISE DE PADR√ïES...');
    console.log(`   ‚ùå Arquivo problem√°tico: ${problematicFileKey}`);
    console.log(`   üìä Timestamp: 1757557104596 (${new Date(1757557104596).toISOString()})`);
    
    // Verificar se h√° padr√£o temporal
    const timestamp = 1757557104596;
    const fileDate = new Date(timestamp);
    console.log(`   üìÖ Data do arquivo: ${fileDate.toLocaleString()}`);
    console.log(`   ‚è∞ Hor√°rio: ${fileDate.getHours()}:${fileDate.getMinutes()}`);
    
    // 3. Verificar outros arquivos do mesmo per√≠odo
    console.log('\n3Ô∏è‚É£ VERIFICANDO OUTROS ARQUIVOS DO MESMO PER√çODO...');
    const recentJobs = await pool.query(`
      SELECT id, file_key, status, created_at, error
      FROM jobs 
      WHERE created_at BETWEEN NOW() - INTERVAL '2 hours' AND NOW()
      ORDER BY created_at DESC
    `);
    
    let problemCount = 0;
    let successCount = 0;
    
    recentJobs.rows.forEach(job => {
      if (job.status === 'error' || job.status === 'failed') {
        problemCount++;
        console.log(`   ‚ùå ${job.file_key}: ${job.status} (${job.error || 'sem erro'})`);
      } else if (job.status === 'done' || job.status === 'completed') {
        successCount++;
        console.log(`   ‚úÖ ${job.file_key}: ${job.status}`);
      } else {
        console.log(`   ‚è≥ ${job.file_key}: ${job.status}`);
      }
    });
    
    console.log(`\n   üìä Resumo das √∫ltimas 2 horas:`);
    console.log(`      - Sucessos: ${successCount}`);
    console.log(`      - Problemas: ${problemCount}`);
    console.log(`      - Taxa de sucesso: ${((successCount / (successCount + problemCount)) * 100).toFixed(1)}%`);
    
    // 4. Investigar poss√≠veis causas
    console.log('\n4Ô∏è‚É£ POSS√çVEIS CAUSAS DO TRAVAMENTO...');
    console.log('   üîç Hip√≥teses baseadas nos logs:');
    console.log('      1. Arquivo WAV com encoding espec√≠fico que trava FFmpeg');
    console.log('      2. Arquivo muito grande que excede limites de mem√≥ria');
    console.log('      3. Arquivo corrompido que entra em loop infinito no decoder');
    console.log('      4. Metadados espec√≠ficos que causam problema na an√°lise');
    console.log('      5. Problema de concorr√™ncia no Railway worker');
    
    // 5. Recomenda√ß√µes
    console.log('\n5Ô∏è‚É£ RECOMENDA√á√ïES...');
    console.log('   üõ†Ô∏è A√ß√µes imediatas:');
    console.log('      ‚úÖ Job problem√°tico j√° foi removido/marcado como erro');
    console.log('      ‚úÖ Sistema voltou ao funcionamento normal');
    console.log('      üìù Arquivo preservado para an√°lise t√©cnica futura');
    
    console.log('\n   üîß Melhorias sugeridas:');
    console.log('      1. Implementar timeout no worker (2-3 minutos m√°ximo)');
    console.log('      2. Adicionar valida√ß√£o pr√©via de arquivos (formato, tamanho)');
    console.log('      3. Implementar retry inteligente (m√°x 2 tentativas)');
    console.log('      4. Adicionar logs detalhados das fases do pipeline');
    console.log('      5. Implementar quarentena autom√°tica de arquivos problem√°ticos');
    
    console.log('\n====================================');
    console.log('üéØ STATUS: Investiga√ß√£o conclu√≠da');
    console.log('‚úÖ Sistema operacional e est√°vel');
    console.log('üîç Arquivo problem√°tico isolado e preservado');
    
    await pool.end();
    
  } catch (error) {
    console.error('‚ùå Erro na investiga√ß√£o:', error);
    await pool.end();
  }
}

investigateProblematicFile();
