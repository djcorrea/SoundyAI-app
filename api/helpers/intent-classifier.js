/**
 * üß† INTENT CLASSIFIER
 * Detecta a inten√ß√£o do usu√°rio baseado na mensagem
 * Permite ajustar system prompt e comportamento do chat
 */

/**
 * Intents dispon√≠veis no sistema
 */
export const INTENTS = {
  MIX_ANALYZER_HELP: 'mix_analyzer_help',      // Ajuda com an√°lise de mixagem
  TECHNICAL_QUESTION: 'technical_question',    // Pergunta t√©cnica sobre √°udio
  CASUAL_MUSIC_TALK: 'casual_music_talk',     // Conversa casual sobre m√∫sica
  PLUGIN_RECOMMENDATION: 'plugin_recommendation', // Pedido de recomenda√ß√£o de plugin
  FOLLOW_UP_ANALYSIS: 'follow_up_analysis',    // Follow-up de an√°lise anterior
  GENERAL: 'general'                           // Conversa geral
};

/**
 * Keywords para cada intent
 */
const INTENT_KEYWORDS = {
  [INTENTS.MIX_ANALYZER_HELP]: [
    'an√°lise', 'analisei', 'mixagem', 'mixar', 'mix', 'master', 'mastering',
    'lufs', 'peak', 'true peak', 'dbtp', 'dynamic range', 'dr', 'lra',
    'crest factor', 'freq', 'hz', 'db', 'clipping', 'compressor',
    'eq', 'equaliza√ß√£o', 'limiter', 'limitador', 'headroom',
    'AN√ÅLISE DE √ÅUDIO', 'AN√ÅLISE T√âCNICA', 'dados t√©cnicos',
    'problema', 'corre√ß√£o', 'ajustar', 'corrigir', 'melhorar',
    'espectro', 'espectral', 'bandas', 'grave', 'm√©dio', 'agudo'
  ],
  
  [INTENTS.TECHNICAL_QUESTION]: [
    'como', 'o que √©', 'qual', 'quando', 'onde', 'por que',
    'explica', 'explicar', 'ensina', 'como fazer', 'tutorial',
    'attack', 'release', 'threshold', 'ratio', 'knee',
    'side-chain', 'parallel', 'send', 'aux', 'bus'
  ],
  
  [INTENTS.PLUGIN_RECOMMENDATION]: [
    'plugin', 'vst', 'qual plugin', 'recomenda', 'sugest√£o de plugin',
    'melhor plugin', 'compressor para', 'eq para', 'reverb para',
    'delay', 'satura√ß√£o', 'distortion', 'tape', 'vintage'
  ],
  
  [INTENTS.FOLLOW_UP_ANALYSIS]: [
    'e se', 'mas', 'por√©m', 'isso significa', 'ent√£o',
    'entendi', 'ok mas', 'e sobre', 'e quanto', 'como aplicar'
  ]
};

/**
 * Estrutura de dados JSON que indica an√°lise de √°udio
 */
const ANALYSIS_JSON_MARKERS = [
  'JSON_DATA',
  'metrics',
  'suggestions',
  'problems',
  'spectralBands',
  'technicalData'
];

/**
 * Classifica a inten√ß√£o de uma mensagem
 * @param {string} message - Mensagem do usu√°rio
 * @param {Array} conversationHistory - Hist√≥rico de mensagens (opcional)
 * @returns {Object} { intent: string, confidence: number, reasoning: string }
 */
export function classifyIntent(message, conversationHistory = []) {
  if (!message || typeof message !== 'string') {
    return {
      intent: INTENTS.GENERAL,
      confidence: 0,
      reasoning: 'Mensagem inv√°lida'
    };
  }

  const messageLower = message.toLowerCase();
  const scores = {};

  // üéØ REGRA 1: Detectar JSON de an√°lise t√©cnica
  if (ANALYSIS_JSON_MARKERS.some(marker => message.includes(marker))) {
    return {
      intent: INTENTS.MIX_ANALYZER_HELP,
      confidence: 1.0,
      reasoning: 'JSON de an√°lise detectado'
    };
  }

  // üéØ REGRA 2: Detectar cabe√ßalho de an√°lise
  if (messageLower.includes('an√°lise de √°udio') || 
      messageLower.includes('an√°lise t√©cnica') ||
      messageLower.includes('analisei meu √°udio')) {
    return {
      intent: INTENTS.MIX_ANALYZER_HELP,
      confidence: 0.95,
      reasoning: 'Cabe√ßalho de an√°lise detectado'
    };
  }

  // üéØ REGRA 3: Calcular score por keywords
  Object.entries(INTENT_KEYWORDS).forEach(([intent, keywords]) => {
    const matchCount = keywords.filter(keyword => 
      messageLower.includes(keyword.toLowerCase())
    ).length;
    
    scores[intent] = matchCount;
  });

  // üéØ REGRA 4: Verificar follow-up de an√°lise anterior
  const lastAssistantMessage = conversationHistory
    .filter(msg => msg.role === 'assistant')
    .slice(-1)[0];
  
  if (lastAssistantMessage && 
      (lastAssistantMessage.content.includes('LUFS') || 
       lastAssistantMessage.content.includes('mixagem') ||
       lastAssistantMessage.content.includes('EQ'))) {
    
    // Se √∫ltima resposta foi sobre mixagem E mensagem atual √© follow-up
    if (scores[INTENTS.FOLLOW_UP_ANALYSIS] > 0) {
      return {
        intent: INTENTS.FOLLOW_UP_ANALYSIS,
        confidence: 0.85,
        reasoning: 'Follow-up de an√°lise anterior detectado'
      };
    }
  }

  // üéØ REGRA 5: Determinar intent com maior score
  const maxScore = Math.max(...Object.values(scores));
  
  if (maxScore === 0) {
    return {
      intent: INTENTS.CASUAL_MUSIC_TALK,
      confidence: 0.3,
      reasoning: 'Nenhum keyword espec√≠fico detectado, assumindo conversa casual'
    };
  }

  const topIntent = Object.entries(scores)
    .find(([, score]) => score === maxScore)?.[0];

  const confidence = Math.min(0.9, maxScore / 10); // Normalizar

  return {
    intent: topIntent,
    confidence,
    reasoning: `${maxScore} keyword(s) correspondente(s)`
  };
}

/**
 * Verifica se a mensagem √© sobre an√°lise de mixagem
 * Helper r√°pido para decis√£o bin√°ria
 * @param {string} message - Mensagem do usu√°rio
 * @returns {boolean} True se for an√°lise de mixagem
 */
export function isMixAnalysisMessage(message) {
  const classification = classifyIntent(message);
  return classification.intent === INTENTS.MIX_ANALYZER_HELP && 
         classification.confidence > 0.7;
}

/**
 * Retorna informa√ß√µes sobre um intent
 * @param {string} intent - Intent classificado
 * @returns {Object} Metadados do intent
 */
export function getIntentMetadata(intent) {
  const metadata = {
    [INTENTS.MIX_ANALYZER_HELP]: {
      name: 'Ajuda com An√°lise de Mixagem',
      systemPromptKey: 'mixAnalyzerHelp',
      maxTokens: 1200,
      temperature: 0.3,
      requiresContext: true
    },
    [INTENTS.TECHNICAL_QUESTION]: {
      name: 'Pergunta T√©cnica',
      systemPromptKey: 'default',
      maxTokens: 800,
      temperature: 0.4,
      requiresContext: false
    },
    [INTENTS.PLUGIN_RECOMMENDATION]: {
      name: 'Recomenda√ß√£o de Plugin',
      systemPromptKey: 'default',
      maxTokens: 600,
      temperature: 0.5,
      requiresContext: false
    },
    [INTENTS.FOLLOW_UP_ANALYSIS]: {
      name: 'Follow-up de An√°lise',
      systemPromptKey: 'mixAnalyzerHelp',
      maxTokens: 1000,
      temperature: 0.3,
      requiresContext: true
    },
    [INTENTS.CASUAL_MUSIC_TALK]: {
      name: 'Conversa Casual sobre M√∫sica',
      systemPromptKey: 'default',
      maxTokens: 600,
      temperature: 0.7,
      requiresContext: false
    },
    [INTENTS.GENERAL]: {
      name: 'Geral',
      systemPromptKey: 'default',
      maxTokens: 500,
      temperature: 0.7,
      requiresContext: false
    }
  };

  return metadata[intent] || metadata[INTENTS.GENERAL];
}
