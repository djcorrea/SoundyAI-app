/**
 * üß™ TESTE AUTOM√ÅTICO - CORRE√á√ÉO BULLMQ
 * Verifica se a arquitetura foi corrigida corretamente
 */

import "dotenv/config";

console.log('üß™ [TESTE] Iniciando verifica√ß√£o da corre√ß√£o BullMQ...\n');

// ‚úÖ 1. VERIFICAR REDIS_URL
console.log('1Ô∏è‚É£ VERIFICANDO REDIS_URL:');
if (process.env.REDIS_URL) {
  const maskedUrl = process.env.REDIS_URL.replace(/:[^:]*@/, ':***@');
  console.log(`‚úÖ REDIS_URL configurada: ${maskedUrl}`);
} else {
  console.log('‚ùå REDIS_URL n√£o configurada!');
  process.exit(1);
}

// ‚úÖ 2. VERIFICAR DEPEND√äNCIAS
console.log('\n2Ô∏è‚É£ VERIFICANDO DEPEND√äNCIAS:');
try {
  const { Queue } = await import('bullmq');
  const Redis = await import('ioredis');
  console.log('‚úÖ BullMQ importado com sucesso');
  console.log('‚úÖ ioredis importado com sucesso');
} catch (error) {
  console.log('‚ùå Erro ao importar depend√™ncias:', error.message);
  process.exit(1);
}

// ‚úÖ 3. VERIFICAR M√ìDULO QUEUE
console.log('\n3Ô∏è‚É£ VERIFICANDO M√ìDULO QUEUE:');
try {
  const { getAudioQueue, getQueueReadyPromise } = await import('./lib/queue.js');
  console.log('‚úÖ M√≥dulo queue.js importado com sucesso');
  
  // Testar inicializa√ß√£o
  await getQueueReadyPromise();
  const queue = getAudioQueue();
  console.log(`‚úÖ Fila '${queue.name}' inicializada com sucesso`);
  
} catch (error) {
  console.log('‚ùå Erro ao importar/inicializar queue:', error.message);
  process.exit(1);
}

// ‚úÖ 4. VERIFICAR API ANALYZE
console.log('\n4Ô∏è‚É£ VERIFICANDO API ANALYZE:');
try {
  const fs = await import('fs');
  const analyzeContent = fs.readFileSync('./api/audio/analyze.js', 'utf8');
  
  if (analyzeContent.includes('getAudioQueue')) {
    console.log('‚úÖ API analyze.js tem BullMQ importado');
  } else {
    console.log('‚ùå API analyze.js N√ÉO tem BullMQ!');
    process.exit(1);
  }
  
  if (analyzeContent.includes("queue.add('process-audio'")) {
    console.log('‚úÖ API usa queue.add() corretamente');
  } else {
    console.log('‚ùå API N√ÉO usa queue.add()!');
    process.exit(1);
  }
  
} catch (error) {
  console.log('‚ùå Erro ao verificar API:', error.message);
  process.exit(1);
}

console.log('\nüéâ TODOS OS TESTES PASSARAM!');
console.log('üöÄ Arquitetura BullMQ corrigida com sucesso!');
console.log('\nüìã PR√ìXIMOS PASSOS:');
console.log('1. Fazer commit das mudan√ßas');
console.log('2. Deploy no Railway');
console.log('3. Iniciar Worker: cd work && node worker-redis.js');
console.log('4. Testar API: npm run test-job');

process.exit(0);