// test-logs-diagnostico.js
// üî• TESTE ULTRA-DETALHADO DOS LOGS DE DIAGN√ìSTICO IMPLEMENTADOS

import { audioQueue, getQueueStats } from './work/queue/redis.js';
import 'dotenv/config';
import { randomUUID } from 'crypto';

console.log('üî• [TESTE-LOGS] INICIANDO TESTE ULTRA-DETALHADO DOS LOGS DE DIAGN√ìSTICO');
console.log('=' .repeat(80));

// üìã Fun√ß√£o para mostrar todos os tipos de logs implementados
function mostrarTiposLogs() {
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üéØ TIPOS DE LOGS IMPLEMENTADOS:`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ÔøΩ [CONFIG] - Configura√ß√£o Redis/Queue (work/queue/redis.js)`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîó [REDIS] - Eventos de conex√£o Redis (connect, ready, error, etc)`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ÔøΩ [QUEUE] - Eventos da fila (waiting, active, completed, failed, stalled)`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üè≠ [WORKER-FACTORY] - Cria√ß√£o de workers`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚ö° [WORKER] - Eventos do worker BullMQ`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üü° [PROCESS] - Processamento detalhado de jobs dentro do audioProcessor`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üöÄ [BACKEND] - Cria√ß√£o de jobs no backend API`);
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üö® [FATAL] - Erros cr√≠ticos globais (uncaughtException, unhandledRejection)`);
  console.log('=' .repeat(80));
}

async function testarLogsDiagnostico() {
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üöÄ Iniciando valida√ß√£o ultra-detalhada...`);

  mostrarTiposLogs();

  // 1. Verificar conex√£o Redis e capturar logs [REDIS]
  try {
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîó Testando conex√£o Redis (deve gerar logs [REDIS])...`);
    const stats = await getQueueStats();
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚úÖ Redis conectado - Stats:`, stats);
  } catch (error) {
    console.error(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚ùå ERRO na conex√£o Redis: ${error.message}`);
    return;
  }

  // 2. Testar enfileiramento (deve gerar logs [QUEUE])
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üì• Testando enfileiramento (deve gerar logs [QUEUE])...`);
  
  try {
    const testJobData = {
      jobId: 'teste-logs-' + Date.now(),
      fileKey: 'test-files/diagnostico-sample.wav',
      mode: 'genre',
      fileName: 'diagnostico-sample.wav'
    };

    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üìã Dados do job:`, JSON.stringify(testJobData, null, 2));
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üéØ Fila de destino: '${audioQueue.name}'`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîß Host Redis: guided-snapper-23234.upstash.io`);

    const job = await audioQueue.add('analyze', testJobData, {
      attempts: 1,
      removeOnComplete: 1,
      removeOnFail: 1
    });

    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚úÖ Job enfileirado com sucesso!`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîç BullMQ ID: ${job.id} | JobID: ${job.data.jobId}`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üìä Job Name: '${job.name}' | Queue: '${job.queueName}'`);
    
    // 3. Aguardar e monitorar eventos (deve capturar [QUEUE] events)
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üëÄ Monitorando por 15 segundos para capturar eventos...`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚ö†Ô∏è  Para processamento completo, certifique-se de que o worker esteja rodando!`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üí° Comando: node work/worker-redis.js`);
    
    let eventsCaptured = {
      waiting: false,
      active: false,
      completed: false,
      failed: false
    };

    // Event listeners para capturar
    const waitingHandler = (capturedJob) => {
      if (capturedJob.id === job.id) {
        console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîç EVENTO CAPTURADO: Job ${job.id} -> WAITING`);
        eventsCaptured.waiting = true;
      }
    };

    const activeHandler = (capturedJob) => {
      if (capturedJob.id === job.id) {
        console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîç EVENTO CAPTURADO: Job ${job.id} -> ACTIVE`);
        eventsCaptured.active = true;
      }
    };

    const completedHandler = (capturedJob, result) => {
      if (capturedJob.id === job.id) {
        console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîç EVENTO CAPTURADO: Job ${job.id} -> COMPLETED`);
        eventsCaptured.completed = true;
      }
    };

    const failedHandler = (capturedJob, err) => {
      if (capturedJob.id === job.id) {
        console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîç EVENTO CAPTURADO: Job ${job.id} -> FAILED (${err.message})`);
        eventsCaptured.failed = true;
      }
    };

    const progressHandler = (capturedJob, progress) => {
      if (capturedJob.id === job.id) {
        console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üîç EVENTO CAPTURADO: Job ${job.id} -> PROGRESS ${progress}%`);
      }
    };

    audioQueue.on('waiting', waitingHandler);
    audioQueue.on('active', activeHandler);
    audioQueue.on('completed', completedHandler);
    audioQueue.on('failed', failedHandler);
    audioQueue.on('progress', progressHandler);

    // Monitorar por 15 segundos com stats peri√≥dicas
    const startTime = Date.now();
    const monitoringTime = 15000;
    
    while ((Date.now() - startTime) < monitoringTime) {
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const currentStats = await getQueueStats();
      const elapsed = Date.now() - startTime;
      
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üìä Stats [${elapsed}ms]: W:${currentStats.waiting} A:${currentStats.active} C:${currentStats.completed} F:${currentStats.failed}`);
      
      // Se job foi processado, sair do loop
      if (eventsCaptured.completed || eventsCaptured.failed) {
        console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚ö° Job processado, finalizando monitoramento...`);
        break;
      }
    }

    // Cleanup listeners
    audioQueue.off('waiting', waitingHandler);
    audioQueue.off('active', activeHandler);
    audioQueue.off('completed', completedHandler);
    audioQueue.off('failed', failedHandler);
    audioQueue.off('progress', progressHandler);

    // 4. Relat√≥rio de diagn√≥stico
    console.log('=' .repeat(80));
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üìã RELAT√ìRIO DE DIAGN√ìSTICO:`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚úÖ Job WAITING capturado: ${eventsCaptured.waiting}`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚ö° Job ACTIVE capturado: ${eventsCaptured.active}`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üéâ Job COMPLETED capturado: ${eventsCaptured.completed}`);
    console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üí• Job FAILED capturado: ${eventsCaptured.failed}`);

    // Diagn√≥stico detalhado
    if (eventsCaptured.waiting && eventsCaptured.active && (eventsCaptured.completed || eventsCaptured.failed)) {
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ÔøΩ DIAGN√ìSTICO: ‚úÖ FLUXO COMPLETO FUNCIONANDO`);
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üí° Worker est√° pegando e processando jobs corretamente!`);
    } else if (eventsCaptured.waiting && eventsCaptured.active && !eventsCaptured.completed && !eventsCaptured.failed) {
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üéØ DIAGN√ìSTICO: ‚ö†Ô∏è Job est√° processando (pode demorar)`);
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üí° Worker est√° ativo, aguarde conclus√£o...`);
    } else if (eventsCaptured.waiting && !eventsCaptured.active) {
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üéØ DIAGN√ìSTICO: ‚ùå WORKER N√ÉO EST√Å PEGANDO JOBS`);
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üí° Verifique se o worker est√° rodando: node work/worker-redis.js`);
    } else if (!eventsCaptured.waiting) {
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üéØ DIAGN√ìSTICO: ‚ùå JOBS N√ÉO EST√ÉO ENTRANDO NA FILA`);
      console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üí° Problema na configura√ß√£o Redis ou fila`);
    }

  } catch (error) {
    console.error(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚ùå ERRO no teste: ${error.message}`);
    console.error(`[TESTE-LOGS][${new Date().toISOString()}] -> Stack trace: ${error.stack}`);
  }

  // 5. Mostrar exemplos de logs implementados
  console.log('=' .repeat(80));
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üì∫ EXEMPLOS DE LOGS IMPLEMENTADOS:`);
  console.log('');
  console.log('üîó [REDIS][TIMESTAMP] -> üü¢ Conectado ao Upstash Redis (Host: guided-snapper-23234.upstash.io:6379)');
  console.log('üìã [QUEUE][TIMESTAMP] -> ‚åõ Job 15 WAITING | Nome: \'analyze\' | JobID: abc12345 | FileKey: sample.wav');  
  console.log('üöÄ [BACKEND][TIMESTAMP] -> üì• INICIANDO enfileiramento no Redis...');
  console.log('üè≠ [WORKER-FACTORY][TIMESTAMP] -> üöÄ Criando worker para fila \'audio-analyzer\' com concorr√™ncia: 5');
  console.log('‚ö° [WORKER][TIMESTAMP] -> ‚ö° PROCESSANDO Job 15 | JobID: abc12345 | File: sample.wav');
  console.log('üü° [PROCESS][TIMESTAMP] -> üü° INICIANDO job 15 {jobId, fileKey, mode, fileName, timestamp, attempts}');
  console.log('üö® [FATAL][TIMESTAMP] -> üö® UNCAUGHT EXCEPTION: Error message');
  console.log('');
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> üèÅ Teste de logs conclu√≠do`);
}

// Executar teste
testarLogsDiagnostico().then(() => {
  console.log(`[TESTE-LOGS][${new Date().toISOString()}] -> ‚úÖ Valida√ß√£o de logs finalizada com sucesso`);
  process.exit(0);
}).catch((err) => {
  console.error(`[TESTE-LOGS][${new Date().toISOString()}] -> üí• Erro fatal: ${err.message}`);
  console.error(`[TESTE-LOGS][${new Date().toISOString()}] -> Stack: ${err.stack}`);
  process.exit(1);
});