// TESTE SIMPLIFICADO: Verificar fun√ß√£o getAudioInfo
import { getAudioInfo } from './work/api/audio/audio-decoder.js';
import fs from 'fs';
import path from 'path';

console.log('üîç TESTE SIMPLIFICADO: Verifica√ß√£o da fun√ß√£o getAudioInfo');
console.log('========================================================');

// Fun√ß√£o para encontrar um arquivo de √°udio existente no sistema
async function findExistingAudioFile() {
  // Procurar por arquivos de √°udio comuns no diret√≥rio
  const commonPaths = [
    'test.wav',
    'test.mp3',
    'sample.wav',
    'exemplo.wav',
    './uploads/test.wav'
  ];
  
  for (const filePath of commonPaths) {
    try {
      if (fs.existsSync(filePath)) {
        console.log(`üìÅ Arquivo encontrado: ${filePath}`);
        return filePath;
      }
    } catch (err) {
      // Continuar procurando
    }
  }
  
  return null;
}

async function testGetAudioInfo() {
  try {
    console.log('üîé Procurando arquivo de √°udio existente...');
    
    const existingFile = await findExistingAudioFile();
    
    if (existingFile) {
      console.log(`‚úÖ Arquivo encontrado: ${existingFile}`);
      console.log('üîç Testando getAudioInfo...');
      
      const fileBuffer = fs.readFileSync(existingFile);
      const audioInfo = await getAudioInfo(fileBuffer, existingFile);
      
      console.log('üìä METADADOS EXTRA√çDOS:');
      console.log('======================');
      console.log(`Sample Rate: ${audioInfo.sampleRate} Hz`);
      console.log(`Channels: ${audioInfo.channels}`);
      console.log(`Duration: ${audioInfo.duration} segundos`);
      console.log(`Codec: ${audioInfo.codec || 'N/A'}`);
      console.log(`Format: ${audioInfo.format || 'N/A'}`);
      console.log(`Bitrate: ${audioInfo.bitrate || 'N/A'}`);
      
      console.log('\n‚úÖ getAudioInfo est√° funcionando!');
      return true;
      
    } else {
      console.log('‚ùå Nenhum arquivo de √°udio encontrado no diret√≥rio');
      console.log('üí° Vou criar um arquivo WAV simples para teste...');
      
      // Criar arquivo WAV m√≠nimo
      const sampleRate = 44100;
      const duration = 1; // 1 segundo
      const channels = 2;
      const samplesPerChannel = sampleRate * duration;
      
      // WAV header simples
      const headerSize = 44;
      const dataSize = samplesPerChannel * channels * 2; // 16-bit
      const fileSize = headerSize + dataSize;
      
      const buffer = Buffer.alloc(fileSize);
      
      // RIFF header
      buffer.write('RIFF', 0);
      buffer.writeUInt32LE(fileSize - 8, 4);
      buffer.write('WAVE', 8);
      
      // fmt chunk
      buffer.write('fmt ', 12);
      buffer.writeUInt32LE(16, 16);
      buffer.writeUInt16LE(1, 20); // PCM
      buffer.writeUInt16LE(channels, 22);
      buffer.writeUInt32LE(sampleRate, 24);
      buffer.writeUInt32LE(sampleRate * channels * 2, 28);
      buffer.writeUInt16LE(channels * 2, 32);
      buffer.writeUInt16LE(16, 34);
      
      // data chunk
      buffer.write('data', 36);
      buffer.writeUInt32LE(dataSize, 40);
      
      // Salvar arquivo tempor√°rio
      fs.writeFileSync('temp-test.wav', buffer);
      console.log('üìÅ Arquivo tempor√°rio criado: temp-test.wav');
      
      try {
        console.log('üîç Testando getAudioInfo com arquivo criado...');
        const audioInfo = await getAudioInfo(buffer, 'temp-test.wav');
        
        console.log('üìä METADADOS EXTRA√çDOS:');
        console.log('======================');
        console.log(`Sample Rate: ${audioInfo.sampleRate} Hz (esperado: 44100)`);
        console.log(`Channels: ${audioInfo.channels} (esperado: 2)`);
        console.log(`Duration: ${audioInfo.duration} segundos (esperado: ~1)`);
        console.log(`Codec: ${audioInfo.codec || 'N/A'}`);
        console.log(`Format: ${audioInfo.format || 'N/A'}`);
        
        // Limpar arquivo tempor√°rio
        fs.unlinkSync('temp-test.wav');
        
        const isCorrect = audioInfo.sampleRate === 44100 && 
                         audioInfo.channels === 2 && 
                         Math.abs(audioInfo.duration - 1) < 0.1;
        
        if (isCorrect) {
          console.log('\nüéâ SUCESSO: Metadados extra√≠dos corretamente!');
          return true;
        } else {
          console.log('\n‚ùå FALHA: Metadados n√£o coincidem com o esperado');
          return false;
        }
        
      } catch (err) {
        console.error('‚ùå ERRO ao testar getAudioInfo:', err.message);
        
        // Limpar arquivo tempor√°rio mesmo em caso de erro
        try {
          fs.unlinkSync('temp-test.wav');
        } catch (cleanupErr) {
          // Ignorar erro de limpeza
        }
        
        return false;
      }
    }
    
  } catch (error) {
    console.error('‚ùå ERRO GERAL:', error.message);
    return false;
  }
}

// Testar tamb√©m se as fun√ß√µes est√£o sendo exportadas
async function testImports() {
  console.log('\nüîß TESTE DE IMPORTS');
  console.log('==================');
  
  try {
    const { processAudioComplete } = await import('./work/api/audio/pipeline-complete.js');
    console.log('‚úÖ processAudioComplete importado');
    
    const { getAudioInfo } = await import('./work/api/audio/audio-decoder.js');
    console.log('‚úÖ getAudioInfo importado');
    
    console.log(`‚úÖ Tipo de getAudioInfo: ${typeof getAudioInfo}`);
    
    return true;
  } catch (err) {
    console.error('‚ùå ERRO de import:', err.message);
    return false;
  }
}

async function runSimpleTest() {
  const importTest = await testImports();
  
  if (importTest) {
    const audioTest = await testGetAudioInfo();
    
    console.log('\nüèÅ RESULTADO FINAL');
    console.log('=================');
    console.log(`Imports: ${importTest ? '‚úÖ OK' : '‚ùå FALHA'}`);
    console.log(`getAudioInfo: ${audioTest ? '‚úÖ OK' : '‚ùå FALHA'}`);
    
    if (importTest && audioTest) {
      console.log('\nüéä TESTE B√ÅSICO PASSOU!');
      console.log('‚úÖ getAudioInfo est√° extraindo metadados corretamente');
    } else {
      console.log('\nüí• TESTE B√ÅSICO FALHOU!');
    }
  }
}

runSimpleTest().catch(console.error);
