// üöÄ TESTE SIMPLIFICADO - FASE 5.5 CONCORR√äNCIA
// Teste b√°sico do sistema de concorr√™ncia

import { getConcurrencyManager, CONCURRENCY_LIMITS } from './api/audio/concurrency-manager.js';

console.log('üöÄ TESTE SIMPLIFICADO - FASE 5.5 CONCORR√äNCIA');
console.log('================================================');

async function testBasicConcurrency() {
  try {
    console.log('\nüìã 1. TESTANDO CONFIGURA√á√ÉO B√ÅSICA');
    
    const manager = getConcurrencyManager();
    console.log('‚úÖ Gerenciador criado');
    
    const stats = manager.getStats();
    console.log('üìä Limites configurados:');
    console.log(`   - FFT Workers: ${CONCURRENCY_LIMITS.MAX_FFT_WORKERS}`);
    console.log(`   - STEMS Workers: ${CONCURRENCY_LIMITS.MAX_STEMS_WORKERS}`);
    console.log(`   - Job Timeout: ${CONCURRENCY_LIMITS.JOB_TIMEOUT}ms`);
    
    console.log('\nüìä Pools dispon√≠veis:');
    Object.entries(stats.pools).forEach(([name, pool]) => {
      console.log(`   - ${name}: ${pool.maxWorkers} workers m√°ximo`);
    });
    
    console.log('\n‚ö° 2. TESTANDO EXECU√á√ÉO DE JOBS');
    
    // Teste simples de job FFT
    const result1 = await manager.executeFFTJob(
      async (data) => {
        console.log(`üîÑ Executando job FFT: ${data.message}`);
        await new Promise(resolve => setTimeout(resolve, 100));
        return { success: true, message: data.message };
      },
      { message: 'Teste FFT b√°sico' }
    );
    
    console.log(`‚úÖ Job FFT conclu√≠do: ${result1.message}`);
    
    // Teste simples de job geral
    const result2 = await manager.executeGeneralJob(
      async (data) => {
        console.log(`üîÑ Executando job geral: ${data.message}`);
        await new Promise(resolve => setTimeout(resolve, 50));
        return { success: true, message: data.message };
      },
      { message: 'Teste geral b√°sico' }
    );
    
    console.log(`‚úÖ Job geral conclu√≠do: ${result2.message}`);
    
    console.log('\n‚ö° 3. TESTANDO M√öLTIPLOS JOBS');
    
    const multipleJobs = [];
    for (let i = 0; i < 3; i++) {
      multipleJobs.push(
        manager.executeFFTJob(
          async (data) => {
            console.log(`üîÑ Job m√∫ltiplo ${data.id} iniciado`);
            await new Promise(resolve => setTimeout(resolve, 100));
            console.log(`‚úÖ Job m√∫ltiplo ${data.id} conclu√≠do`);
            return { id: data.id, processed: true };
          },
          { id: i }
        )
      );
    }
    
    const multipleResults = await Promise.all(multipleJobs);
    console.log(`‚úÖ ${multipleResults.length} jobs m√∫ltiplos conclu√≠dos`);
    
    console.log('\nüìä 4. ESTAT√çSTICAS FINAIS');
    await manager.waitForIdle();
    const finalStats = manager.getStats();
    
    console.log(`üìä Jobs ativos: ${finalStats.totalActiveJobs}`);
    console.log(`üìä Jobs na fila: ${finalStats.totalQueuedJobs}`);
    console.log(`üìä Sistema idle: ${finalStats.totalActiveJobs === 0 && finalStats.totalQueuedJobs === 0 ? 'SIM' : 'N√ÉO'}`);
    
    console.log('\nüéâ TESTE B√ÅSICO DE CONCORR√äNCIA - SUCESSO!');
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE B√ÅSICO:', error.message);
    throw error;
  }
}

// Executar teste
testBasicConcurrency().catch(error => {
  console.error('‚ùå Falha no teste:', error);
  process.exit(1);
});
