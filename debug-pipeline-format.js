// üîç SCRIPT DE DEBUG: Analisar formato de sa√≠da do pipeline
// Verificar se normalizeBackendAnalysisData est√° recebendo dados corretos

console.log('üîç Simulando dados do pipeline vs dados esperados pelo frontend...\n');

// Dados que o pipeline produz (baseado nos logs)
const pipelineData = {
  // Score do pipeline
  score: 92.9,
  classification: 'professional',
  
  // Estrutura do pipeline (baseada em json-output.js)
  loudness: {
    integrated: -19.691307874020087,
    shortTerm: -19.2,
    momentary: -18.8,
    lra: 2.9058398666753575,
    unit: "LUFS"
  },
  
  truePeak: {
    maxDbtp: 11.33198327259689,
    maxLinear: 0.88542,
    unit: "dBTP"
  },
  
  stereo: {
    correlation: 0.817,
    balance: 0,
    width: 0.5,
    isMonoCompatible: false,
    hasPhaseIssues: false
  },
  
  metadata: {
    fileName: 'test_audio.wav',
    fileSize: 1234567,
    processingTime: 2543,
    timestamp: new Date().toISOString(),
    jobId: '48264a53-e5b7-445a-a71e-85a4f7b08ff2'
  }
};

// Dados que a UI est√° mostrando (inconsistentes)
const uiDisplayedData = {
  score: 99.9,
  truePeak: { maxDbtp: -1.1, maxLinear: 0.88 },
  loudness: { integrated: -17.2, lra: 4.9 },
  stereo: { correlation: 0.839 }
};

console.log('üìä DADOS DO PIPELINE (corretos):');
console.log('  Score:', pipelineData.score);
console.log('  True Peak dBTP:', pipelineData.truePeak.maxDbtp);
console.log('  LUFS Integrated:', pipelineData.loudness.integrated);
console.log('  Stereo Correlation:', pipelineData.stereo.correlation);

console.log('\nüñ•Ô∏è DADOS EXIBIDOS NA UI (incorretos):');
console.log('  Score:', uiDisplayedData.score);
console.log('  True Peak dBTP:', uiDisplayedData.truePeak.maxDbtp);
console.log('  LUFS Integrated:', uiDisplayedData.loudness.integrated);
console.log('  Stereo Correlation:', uiDisplayedData.stereo.correlation);

console.log('\nüö® DISCREP√ÇNCIAS IDENTIFICADAS:');
console.log('  Score:', `${pipelineData.score}% ‚ûú ${uiDisplayedData.score}% (diferen√ßa: ${(uiDisplayedData.score - pipelineData.score).toFixed(1)}%)`);
console.log('  True Peak:', `${pipelineData.truePeak.maxDbtp}dBTP ‚ûú ${uiDisplayedData.truePeak.maxDbtp}dBTP (diferen√ßa: ${(uiDisplayedData.truePeak.maxDbtp - pipelineData.truePeak.maxDbtp).toFixed(1)}dB)`);
console.log('  LUFS:', `${pipelineData.loudness.integrated.toFixed(1)}LUFS ‚ûú ${uiDisplayedData.loudness.integrated}LUFS (diferen√ßa: ${(uiDisplayedData.loudness.integrated - pipelineData.loudness.integrated).toFixed(1)}dB)`);
console.log('  Stereo:', `${pipelineData.stereo.correlation.toFixed(3)} ‚ûú ${uiDisplayedData.stereo.correlation} (diferen√ßa: ${(uiDisplayedData.stereo.correlation - pipelineData.stereo.correlation).toFixed(3)})`);

console.log('\nüîß SIMULANDO normalizeBackendAnalysisData...');

// Simular o que acontece na fun√ß√£o normalizeBackendAnalysisData
function simulateNormalization(backendData) {
  console.log('üì• Dados recebidos pelo normalizeBackendAnalysisData:', JSON.stringify(backendData, null, 2).substring(0, 300) + '...');
  
  // A fun√ß√£o est√° procurando por estas chaves:
  const source = backendData.technicalData || backendData.metrics || backendData;
  
  console.log('\nüîç Checando mapeamento de campos:');
  console.log('  source.peak:', source.peak || 'UNDEFINED');
  console.log('  source.peak_db:', source.peak_db || 'UNDEFINED'); 
  console.log('  source.peakLevel:', source.peakLevel || 'UNDEFINED');
  console.log('  source.lufsIntegrated:', source.lufsIntegrated || 'UNDEFINED');
  console.log('  source.lufs_integrated:', source.lufs_integrated || 'UNDEFINED');
  console.log('  source.lufs:', source.lufs || 'UNDEFINED');
  console.log('  source.stereoCorrelation:', source.stereoCorrelation || 'UNDEFINED');
  console.log('  source.stereo_correlation:', source.stereo_correlation || 'UNDEFINED');
  
  // Como est√° estruturado no pipeline, a fun√ß√£o N√ÉO vai encontrar os dados!
  console.log('\n‚ùå PROBLEMA: normalizeBackendAnalysisData n√£o encontra dados no formato correto!');
  console.log('   Os dados do pipeline est√£o em: backendData.loudness.integrated');
  console.log('   Mas a fun√ß√£o procura em: source.lufsIntegrated ou source.lufs_integrated');
}

simulateNormalization(pipelineData);

console.log('\nüí° SOLU√á√ÉO NECESS√ÅRIA:');
console.log('1. Ajustar normalizeBackendAnalysisData para ler formato correto do pipeline');
console.log('2. OU ajustar json-output.js para usar nomes de campo compat√≠veis');
console.log('3. OU criar um adapter entre pipeline ‚ûú normaliza√ß√£o');