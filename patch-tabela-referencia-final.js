/**
 * üéØ PATCH DEFINITIVO - OCULTAR VALORES DA TABELA DE REFER√äNCIA
 * 
 * Este script garante que NUNCA apare√ßam valores num√©ricos na coluna de diferen√ßa
 * da tabela de refer√™ncia, independente de qual sistema esteja sendo usado.
 * 
 * OBJETIVO: Mostrar apenas "‚úÖ Ideal", "‚ö†Ô∏è Ajuste leve", "‚ùå Corrigir"
 * PRESERVAR: Todos os c√°lculos no backend para sugest√µes avan√ßadas
 */

(function() {
    'use strict';
    
    console.log('üéØ [PATCH] Aplicando corre√ß√£o definitiva da tabela de refer√™ncia...');
    
    /**
     * üé® FUN√á√ÉO DEFINITIVA: Criar c√©lula apenas com status visual
     */
    function createStatusOnlyCell(diff, unit, tolerance, metricName = '') {
        if (!Number.isFinite(diff) || !Number.isFinite(tolerance) || tolerance <= 0) {
            return '<td class="na" style="text-align: center;"><span style="opacity: 0.6;">‚Äî</span></td>';
        }
        
        const absDiff = Math.abs(diff);
        let cssClass, statusIcon, statusText;
        
        // L√≥gica de classifica√ß√£o baseada na toler√¢ncia
        if (absDiff <= tolerance) {
            // ‚úÖ ZONA IDEAL
            cssClass = 'ok';
            statusIcon = '‚úÖ';
            statusText = 'Ideal';
        } else {
            const multiplicador = absDiff / tolerance;
            if (multiplicador <= 2) {
                // ‚ö†Ô∏è ZONA AJUSTAR
                cssClass = 'yellow';
                statusIcon = '‚ö†Ô∏è';
                statusText = 'Ajuste leve';
            } else {
                // ‚ùå ZONA CORRIGIR
                cssClass = 'warn';
                statusIcon = '‚ùå';
                statusText = 'Corrigir';
            }
        }
        
        return `<td class="${cssClass}" style="text-align: center; padding: 8px;">
            <div style="font-size: 12px; font-weight: 600;">${statusText}</div>
        </td>`;
    }

    /**
     * üîÑ INTERCEPTAR TODAS AS FUN√á√ïES QUE PODEM CRIAR C√âLULAS DE DIFEREN√áA
     */
    
    // 1. Interceptar createEnhancedDiffCell (sistema principal)
    if (typeof window.createEnhancedDiffCell === 'function') {
        const original = window.createEnhancedDiffCell;
        window.createEnhancedDiffCell = function(diff, unit, tolerance, metricName) {
            return createStatusOnlyCell(diff, unit, tolerance, metricName);
        };
        console.log('‚úÖ [PATCH] createEnhancedDiffCell interceptado');
    }
    
    // 2. Interceptar createEnhancedDiffCellMigrado (sistema de migra√ß√£o)
    if (typeof window.createEnhancedDiffCellMigrado === 'function') {
        window.createEnhancedDiffCellMigrado = function(diff, unit, tolerance, metricName) {
            return createStatusOnlyCell(diff, unit, tolerance, metricName);
        };
        console.log('‚úÖ [PATCH] createEnhancedDiffCellMigrado interceptado');
    }
    
    // 3. Criar fun√ß√£o global para uso direto
    window.createStatusOnlyDiffCell = createStatusOnlyCell;
    
    // 4. Feature flag para indicar que a corre√ß√£o est√° ativa
    window.REFERENCE_TABLE_HIDE_VALUES = true;
    
    /**
     * üîç MONITORAR E INTERCEPTAR NOVOS CARREGAMENTOS
     */
    const originalDefineProperty = Object.defineProperty;
    Object.defineProperty = function(obj, prop, descriptor) {
        // Interceptar quando createEnhancedDiffCell for definida
        if (obj === window && prop === 'createEnhancedDiffCell' && descriptor.value) {
            console.log('üîÑ [PATCH] Nova fun√ß√£o createEnhancedDiffCell detectada, interceptando...');
            descriptor.value = createStatusOnlyCell;
        }
        return originalDefineProperty.call(this, obj, prop, descriptor);
    };
    
    /**
     * üéõÔ∏è UTILIT√ÅRIOS DE CONTROLE
     */
    window.toggleReferenceTableValues = function(showValues = false) {
        window.REFERENCE_TABLE_HIDE_VALUES = !showValues;
        console.log(`üéØ [PATCH] Modo: ${showValues ? 'Valores num√©ricos' : 'Apenas status'}`);
        
        // Reprocessar tabela se poss√≠vel
        if (window.renderReferenceComparisons && window.__lastAnalysis) {
            window.renderReferenceComparisons(window.__lastAnalysis);
        }
    };
    
    window.debugReferenceTable = function() {
        console.log('üîç [DEBUG] Estado da tabela de refer√™ncia:', {
            hideValues: window.REFERENCE_TABLE_HIDE_VALUES,
            hasCreateEnhanced: typeof window.createEnhancedDiffCell === 'function',
            hasRenderFunction: typeof window.renderReferenceComparisons === 'function',
            hasLastAnalysis: !!window.__lastAnalysis
        });
    };
    
    /**
     * üß™ TESTE R√ÅPIDO
     */
    function quickTest() {
        const testCases = [
            { diff: 0.2, tol: 0.5, expected: 'Ideal' },
            { diff: 1.2, tol: 0.5, expected: 'Ajuste leve' },
            { diff: 2.5, tol: 0.5, expected: 'Corrigir' }
        ];
        
        console.log('üß™ [PATCH] Testando corre√ß√£o...');
        let allPassed = true;
        
        for (const test of testCases) {
            const result = createStatusOnlyCell(test.diff, 'dB', test.tol);
            const passed = result.includes(test.expected);
            
            if (passed) {
                console.log(`‚úÖ ${test.expected}: OK`);
            } else {
                console.error(`‚ùå ${test.expected}: FALHOU`);
                allPassed = false;
            }
        }
        
        if (allPassed) {
            console.log('üéâ [PATCH] Todos os testes passaram! Corre√ß√£o funcionando.');
        } else {
            console.error('üö® [PATCH] Alguns testes falharam. Verifique a implementa√ß√£o.');
        }
    }
    
    // Executar teste
    quickTest();
    
    console.log('‚úÖ [PATCH] Corre√ß√£o definitiva aplicada com sucesso!');
    console.log('üìã [PATCH] A tabela agora mostra apenas status visuais');
    console.log('üîß [PATCH] Use debugReferenceTable() para verificar o estado');
    
})();