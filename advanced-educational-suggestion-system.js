// üéì SISTEMA DE SUGEST√ïES EDUCATIVO ULTRA-AVAN√áADO
// O melhor sistema de sugest√µes do planeta - educativo, intuitivo e contextual

class AdvancedEducationalSuggestionSystem {
    constructor() {
        console.log('üéì [EDUCATIVO] Inicializando Sistema de Sugest√µes Ultra-Avan√ßado...');
        
        // üìö Base de conhecimento educativo
        this.educationalDatabase = this.createEducationalDatabase();
        
        // üéØ Contextos musicais inteligentes
        this.musicalContexts = this.createMusicalContexts();
        
        // üîß Templates de solu√ß√µes pr√°ticas
        this.solutionTemplates = this.createSolutionTemplates();
        
        // üéµ Caracter√≠sticas por g√™nero
        this.genreCharacteristics = this.createGenreCharacteristics();
        
        // üèÜ Sistema de prioriza√ß√£o inteligente
        this.priorityMatrix = this.createPriorityMatrix();
        
        // üìä Hist√≥rico e aprendizado
        this.learningSystem = {
            userPatterns: new Map(),
            effectivenessHistory: new Map(),
            preferenceWeights: this.getDefaultPreferences()
        };
        
        console.log('‚úÖ [EDUCATIVO] Sistema Ultra-Avan√ßado carregado com sucesso!');
    }

    /**
     * üìö Criar base de conhecimento educativo
     */
    createEducationalDatabase() {
        return {
            // === M√âTRICAS FUNDAMENTAIS ===
            lufs: {
                concept: "LUFS (Loudness Units relative to Full Scale)",
                explanation: "Medida padr√£o de loudness percebido que considera como nosso ouvido realmente processa o som. Diferente do RMS ou peak, LUFS imita a sensibilidade auditiva humana.",
                importance: "Essencial para compatibilidade com plataformas de streaming (Spotify, Apple Music, YouTube) que normalizam automaticamente o volume.",
                ranges: {
                    streaming: "-14 LUFS (Spotify, YouTube)",
                    commercial: "-8 a -10 LUFS (CDs, download)",
                    broadcast: "-23 LUFS (TV/R√°dio)",
                    cinematic: "-27 LUFS (filmes)"
                },
                consequences: {
                    tooLow: "Falta de competitividade comercial, impacto reduzido, perda de energia",
                    tooHigh: "Fadiga auditiva, compress√£o autom√°tica pelas plataformas, perda de din√¢mica"
                },
                solutions: {
                    increase: "Compressor multibanda + Limiter, automa√ß√£o de ganho, satura√ß√£o harm√¥nica",
                    decrease: "Reduzir gain staging, menos compress√£o, mais headroom"
                },
                dawExamples: {
                    proTools: "Pro Limiter com LUFS meter, Insight 2 para monitoramento",
                    logic: "Adaptive Limiter + ChromaVerb para densidade, Level Meter para LUFS",
                    ableton: "Limiter + Utility para gain staging, external LUFS plugins",
                    cubase: "Maximizer + Control Room para monitoring, Multipressor para controle"
                }
            },

            truePeak: {
                concept: "True Peak (Inter-sample Peaks)",
                explanation: "Picos que ocorrem entre as amostras digitais durante a convers√£o D/A. N√£o aparecem no medidor digital comum, mas causam distor√ß√£o real nos conversores.",
                importance: "Evita distor√ß√£o aud√≠vel em sistemas de reprodu√ß√£o consumer e problemas de codifica√ß√£o em streaming.",
                ranges: {
                    safe: "-1.0 dBTP ou menor",
                    conservative: "-2.0 dBTP (para seguran√ßa extra)",
                    broadcast: "-3.0 dBTP (requisito t√©cnico)"
                },
                consequences: {
                    tooHigh: "Distor√ß√£o em DACs consumer, artefatos de codifica√ß√£o MP3/AAC, problemas em r√°dio"
                },
                solutions: {
                    control: "Limiter com oversampling, True Peak limiting, ISP detection"
                },
                dawExamples: {
                    proTools: "Pro Limiter com ISP button ativo",
                    logic: "Adaptive Limiter com True Peak Detection",
                    ableton: "Limiter com oversampling 4x",
                    universal: "Waves L3, FabFilter Pro-L 2, Ozone Maximizer"
                }
            },

            lra: {
                concept: "LRA (Loudness Range)",
                explanation: "Mede a varia√ß√£o din√¢mica da m√∫sica, excluindo os 10% mais silenciosos e 5% mais altos. Indica se a m√∫sica mant√©m interesse din√¢mico ou est√° over-comprimida.",
                importance: "Preserva a musicalidade e evita fadiga auditiva. M√∫sicas com LRA muito baixo soam 'mortas' e cansativas.",
                ranges: {
                    ideal: "4-14 LU (dependendo do g√™nero)",
                    electronic: "2-6 LU (aceit√°vel)",
                    rock: "6-12 LU (din√¢mico)",
                    classical: "15-30 LU (muito din√¢mico)"
                },
                consequences: {
                    tooLow: "Over-compression, fadiga auditiva, perda do groove natural",
                    tooHigh: "Inconsist√™ncia em diferentes sistemas, problemas em ambientes ruidosos"
                },
                solutions: {
                    increase: "Menos compress√£o global, compress√£o paralela, preservar transientes",
                    decrease: "Compress√£o suave, leveling entre se√ß√µes, automa√ß√£o de volume"
                }
            },

            dynamicRange: {
                concept: "Dynamic Range (DR)",
                explanation: "Diferen√ßa entre os picos e o n√≠vel m√©dio da m√∫sica. Indica o qu√£o 'comprimida' est√° a din√¢mica da faixa.",
                importance: "Preserva a naturalidade musical e o impacto dos transientes (bateria, ataques de instrumentos).",
                ranges: {
                    excellent: "DR14+ (audi√≥filo)",
                    good: "DR10-13 (balanceado)",
                    acceptable: "DR7-9 (comercial)",
                    poor: "DR6 ou menos (over-compressed)"
                },
                relationship: "Relacionado ao LRA, mas medido diferentemente. DR foca em peaks vs RMS."
            },

            // === BANDAS ESPECTRAIS ===
            spectralBands: {
                sub: {
                    range: "20-60 Hz",
                    function: "Funda√ß√£o f√≠sica da m√∫sica, impacto corporal",
                    problems: "Excesso causa 'lama', falta reduz impacto",
                    solutions: "High-pass instruments acima de 60Hz, side-chain compression",
                    context: "Sentido mais que ouvido, especialmente importante em sistemas com subwoofer"
                },
                bass: {
                    range: "60-150 Hz",
                    function: "Fundamental dos graves, peso musical",
                    problems: "Excesso causa masking, falta reduz groove",
                    solutions: "EQ complementar bass/kick, compress√£o controlada",
                    context: "√Årea cr√≠tica para groove e peso musical"
                },
                lowMid: {
                    range: "150-800 Hz",
                    function: "Corpo dos instrumentos, warmth",
                    problems: "Excesso causa 'lama', falta reduz corpo",
                    solutions: "Notch EQ em frequ√™ncias problem√°ticas, compress√£o multibanda",
                    context: "Onde mora o 'corpo' da maioria dos instrumentos"
                },
                mid: {
                    range: "800-3000 Hz",
                    function: "Presen√ßa vocal, defini√ß√£o de instrumentos",
                    problems: "Excesso causa fadiga, falta reduz clareza",
                    solutions: "EQ suave, de-esser para vocais",
                    context: "√Årea mais sens√≠vel do ouvido humano"
                },
                highMid: {
                    range: "3-6 kHz",
                    function: "Presen√ßa e clareza",
                    problems: "Excesso causa agressividade, falta reduz defini√ß√£o",
                    solutions: "EQ din√¢mico, compress√£o multibanda seletiva",
                    context: "Cr√≠tico para clareza vocal e inteligibilidade"
                },
                presenca: {
                    range: "6-12 kHz",
                    function: "Presen√ßa e brilho",
                    problems: "Excesso causa sibil√¢ncia, falta reduz brilho",
                    solutions: "De-esser, EQ suave, satura√ß√£o harm√¥nica",
                    context: "Adiciona 'ar' e presen√ßa √† m√∫sica"
                },
                brilho: {
                    range: "12-20 kHz",
                    function: "Ar e espacialidade",
                    problems: "Excesso causa fadiga, falta reduz abertura",
                    solutions: "Harmonic excitement, EQ suave, reverb de qualidade",
                    context: "Contribui para sensa√ß√£o de 'abertura' e qualidade hi-fi"
                }
            }
        };
    }

    /**
     * üéµ Criar contextos musicais inteligentes
     */
    createMusicalContexts() {
        return {
            electronic: {
                characteristics: "Din√¢mica controlada, sub bass presente, transientes precisos",
                lufsTarget: -8,
                lraRange: [2, 6],
                spectralFocus: ["sub", "bass", "presenca"],
                commonIssues: ["masking nos graves", "harshness nos highs", "over-compression"]
            },
            rock: {
                characteristics: "Din√¢mica moderada, midrange pronunciado, punch em transientes",
                lufsTarget: -10,
                lraRange: [6, 12],
                spectralFocus: ["lowMid", "mid", "highMid"],
                commonIssues: ["guitar masking", "vocal harshness", "drummer competition"]
            },
            pop: {
                characteristics: "Loudness competitivo, vocal clareza, groove consistente",
                lufsTarget: -9,
                lraRange: [4, 8],
                spectralFocus: ["mid", "highMid", "presenca"],
                commonIssues: ["vocal sibilance", "bass competition", "mid congestion"]
            },
            hiphop: {
                characteristics: "Sub bass dominante, vocal presen√ßa, kick punch",
                lufsTarget: -8,
                lraRange: [3, 7],
                spectralFocus: ["sub", "bass", "mid"],
                commonIssues: ["sub/kick competition", "vocal masking", "hi-hat harshness"]
            },
            jazz: {
                characteristics: "Din√¢mica preservada, espacialidade, naturalidade tonal",
                lufsTarget: -12,
                lraRange: [8, 16],
                spectralFocus: ["lowMid", "mid", "brilho"],
                commonIssues: ["over-compression", "unnatural reverb", "frequency imbalance"]
            },
            classical: {
                characteristics: "M√°xima din√¢mica, espacialidade natural, tonal accuracy",
                lufsTarget: -18,
                lraRange: [15, 30],
                spectralFocus: ["mid", "highMid", "brilho"],
                commonIssues: ["dynamic compression", "artificial enhancement", "phase issues"]
            }
        };
    }

    /**
     * üîß Criar templates de solu√ß√µes pr√°ticas
     */
    createSolutionTemplates() {
        return {
            // === LOUDNESS SOLUTIONS ===
            increaseLoudness: {
                title: "Aumentar Loudness Competitivo",
                steps: [
                    "1. üìä Analisar espectro atual - identificar √°reas com excesso de energia",
                    "2. üîß EQ subtrativo - remover frequ√™ncias desnecess√°rias (low-cut, notch problem√°ticos)",
                    "3. üóúÔ∏è Compress√£o serial - 2-3 compressores suaves (2:1, attack m√©dio)",
                    "4. üöÄ Satura√ß√£o harm√¥nica - adicionar densidade sem aumentar picos",
                    "5. üß± Limiter final - ceiling em -1dBTP, release r√°pido para transpar√™ncia"
                ],
                dawSpecific: {
                    proTools: "Pro Compressor ‚Üí Pro Saturate ‚Üí Pro Limiter",
                    logic: "VCA ‚Üí Tape ‚Üí Adaptive Limiter",
                    ableton: "Compressor ‚Üí Saturator ‚Üí Limiter",
                    cubase: "VintageVCA ‚Üí Magneto ‚Üí Maximizer"
                },
                warnings: [
                    "‚ö†Ô∏è N√£o force limiter al√©m de 3-4dB de redu√ß√£o",
                    "‚ö†Ô∏è Monitore True Peak constantemente",
                    "‚ö†Ô∏è Compare com refer√™ncias em volume matchado"
                ]
            },

            reduceLoudness: {
                title: "Reduzir Loudness Excessivo",
                steps: [
                    "1. üìâ Baixar gain geral - reduzir volume antes do limiter",
                    "2. üóúÔ∏è Menos compress√£o - reduzir ratio e aumentar threshold",
                    "3. üìä Mais headroom - criar espa√ßo para din√¢mica natural",
                    "4. üéöÔ∏è Automa√ß√£o sutil - controlar n√≠veis sem compress√£o excessiva"
                ],
                philosophy: "Menos √© mais - deixe a m√∫sica respirar",
                benefits: ["Menos fadiga auditiva", "Mais musicalidade", "Melhor tradu√ß√£o em diferentes sistemas"]
            },

            // === SPECTRAL SOLUTIONS ===
            reduceHarshness: {
                title: "Eliminar Agressividade (3-6 kHz)",
                steps: [
                    "1. üîç Identificar frequ√™ncia exata - usar EQ com Q alto para sweep",
                    "2. üéØ EQ din√¢mico - corte que atua apenas nos picos problem√°ticos",
                    "3. üóúÔ∏è Compressor multibanda - controlar apenas essa faixa",
                    "4. üéµ Alternativa: satura√ß√£o suave para arredondar transientes"
                ],
                frequencies: ["3.5-4.5 kHz (vocal harshness)", "5-6 kHz (cymbal harshness)", "2.5-3 kHz (guitar aggression)"],
                tools: ["FabFilter Pro-Q3 dynamic", "Waves C6 multiband", "Plugin Alliance dynamic EQs"]
            },

            reduceSibilance: {
                title: "Controlar Sibil√¢ncia (6-9 kHz)",
                steps: [
                    "1. üéôÔ∏è De-esser dedicado - ferramenta espec√≠fica para sibilantes",
                    "2. üéØ EQ din√¢mico em 7.5 kHz - corte suave apenas quando necess√°rio",
                    "3. üóúÔ∏è Compressor com side-chain filtered - triggering apenas nas sibilantes",
                    "4. üì¶ Verificar em diferentes monitores - headphones revelam sibil√¢ncia oculta"
                ],
                settings: {
                    deEsser: "Frequ√™ncia: 7-8 kHz, Threshold suave, Release r√°pido",
                    dynamicEQ: "Q: 2-3, Corte: -2 a -4 dB quando ativo"
                }
            },

            // === DYNAMIC SOLUTIONS ===
            increaseDynamics: {
                title: "Recuperar Din√¢mica Natural",
                steps: [
                    "1. üóúÔ∏è Reduzir compress√£o global - aumentar threshold, reduzir ratio",
                    "2. üîÑ Compress√£o paralela - misturar sinal comprimido com natural",
                    "3. ü•Å Preservar transientes - attack lento em compressores",
                    "4. üìà Automa√ß√£o manual - controlar din√¢mica sem compress√£o"
                ],
                philosophy: "Din√¢mica = vida musical. Compress√£o deve servir a m√∫sica, n√£o domin√°-la.",
                techniques: ["New York compression", "Serial compression", "Transient shaping"]
            },

            controlDynamics: {
                title: "Controlar Din√¢mica Excessiva",
                steps: [
                    "1. üéöÔ∏è Leveling suave - automa√ß√£o de volume entre se√ß√µes",
                    "2. üóúÔ∏è Compress√£o gentil - ratio baixo (2:1), attack/release musical",
                    "3. üéµ Compressor multibanda - controlar apenas frequ√™ncias problem√°ticas",
                    "4. üìä Verificar em sistemas limitados - car audio, phone speakers"
                ],
                balance: "Manter interesse musical enquanto garante consist√™ncia"
            }
        };
    }

    /**
     * üéµ Criar caracter√≠sticas por g√™nero
     */
    createGenreCharacteristics() {
        return {
            electronic: {
                identity: "Precis√£o digital, impacto f√≠sico, clareza sint√©tica",
                spectralProfile: {
                    sub: "Essencial - funda√ß√£o f√≠sica",
                    bass: "Controlado - defini√ß√£o sem lama",
                    mid: "Limpo - clareza de elementos",
                    high: "Brilhante - presen√ßa digital"
                },
                dynamicProfile: "Controlada mas com impacto",
                referenceArtists: ["Daft Punk", "Deadmau5", "Justice", "Flume"],
                commonTools: ["Compress√£o side-chain", "S√≠ntese FM", "Reverb espacial"]
            },
            
            rock: {
                identity: "Energia org√¢nica, punch instrumental, presen√ßa vocal",
                spectralProfile: {
                    lowMid: "Rico - corpo de guitarras",
                    mid: "Presente - vocal/lead guitar",
                    highMid: "Agressivo controlado - presen√ßa"
                },
                dynamicProfile: "Moderada - preservar punch",
                referenceArtists: ["Queen", "Foo Fighters", "Muse", "Arctic Monkeys"],
                commonTools: ["Amp simulation", "Tape compression", "Parallel processing"]
            },

            pop: {
                identity: "Clareza vocal, groove consistente, apelo comercial",
                spectralProfile: {
                    mid: "Vocal clarity priorit√°ria",
                    highMid: "Presen√ßa sem agressividade",
                    presenca: "Brilho controlado"
                },
                dynamicProfile: "Comercial - consistente mas musical",
                referenceArtists: ["Taylor Swift", "The Weeknd", "Dua Lipa", "Bruno Mars"],
                commonTools: ["Vocal tuning", "Bus compression", "Stereo widening"]
            }
        };
    }

    /**
     * üèÜ Criar matriz de prioriza√ß√£o inteligente
     */
    createPriorityMatrix() {
        return {
            // Criticidade por tipo de problema
            severity: {
                critical: {
                    weight: 1.0,
                    issues: ["clipping", "distor√ß√£o aud√≠vel", "phase cancellation"],
                    urgency: "Corrigir imediatamente - afeta reprodu√ß√£o b√°sica"
                },
                important: {
                    weight: 0.8,
                    issues: ["true peak alto", "harshness severo", "masking grave"],
                    urgency: "Prioridade alta - afeta qualidade percebida"
                },
                moderate: {
                    weight: 0.6,
                    issues: ["loudness competition", "spectral imbalance", "dynamics"],
                    urgency: "Melhorar para competitividade"
                },
                enhancement: {
                    weight: 0.4,
                    issues: ["stereo field", "harmonic content", "micro-dynamics"],
                    urgency: "Refinamentos para excel√™ncia"
                }
            },

            // Impacto por contexto de uso
            context: {
                streaming: {
                    priorities: ["lufs", "true_peak", "lra"],
                    weight: 1.0,
                    note: "Compatibilidade com algoritmos de normaliza√ß√£o"
                },
                radio: {
                    priorities: ["loudness", "spectral_balance", "dynamics"],
                    weight: 0.9,
                    note: "Competir em ambiente de alta compress√£o"
                },
                vinyl: {
                    priorities: ["low_end", "dynamics", "stereo_correlation"],
                    weight: 0.7,
                    note: "Limita√ß√µes f√≠sicas do meio"
                },
                audiophile: {
                    priorities: ["dynamics", "spectral_accuracy", "stereo_field"],
                    weight: 0.8,
                    note: "M√°xima qualidade t√©cnica"
                }
            }
        };
    }

    /**
     * üéØ M√©todo principal: analisar e gerar sugest√µes educativas
     */
    generateAdvancedSuggestions(analysis, referenceData, userPreferences = {}) {
        console.log('üéì [EDUCATIVO] Iniciando an√°lise avan√ßada...');
        
        const startTime = Date.now();
        
        try {
            // 1. An√°lise contextual inteligente
            const context = this.analyzeMusicalContext(analysis, referenceData);
            console.log('üéµ [CONTEXTO]', context);

            // 2. Detec√ß√£o de problemas com prioriza√ß√£o
            const issues = this.detectIssuesWithPriority(analysis, referenceData, context);
            console.log('üîç [PROBLEMAS]', issues);

            // 3. Gera√ß√£o de sugest√µes educativas
            const suggestions = this.generateEducationalSuggestions(issues, context, userPreferences);
            console.log('üí° [SUGEST√ïES]', suggestions);

            // 4. Enriquecimento com explica√ß√µes
            const enrichedSuggestions = this.enrichWithExplanations(suggestions, context);
            console.log('üéì [ENRIQUECIDAS]', enrichedSuggestions);

            // 5. Ordena√ß√£o inteligente
            const finalSuggestions = this.intelligentPrioritization(enrichedSuggestions, userPreferences);
            
            const processingTime = Date.now() - startTime;
            console.log(`‚úÖ [EDUCATIVO] An√°lise conclu√≠da em ${processingTime}ms`);

            return {
                suggestions: finalSuggestions,
                context: context,
                summary: this.generateSummary(finalSuggestions, context),
                metadata: {
                    processingTime,
                    issuesFound: issues.length,
                    suggestionsGenerated: finalSuggestions.length,
                    version: "1.0.0-ultra-advanced"
                }
            };

        } catch (error) {
            console.error('üö® [EDUCATIVO] Erro na an√°lise:', error);
            return {
                error: error.message,
                fallbackSuggestions: this.generateFallbackSuggestions(analysis)
            };
        }
    }

    /**
     * üéµ Analisar contexto musical
     */
    analyzeMusicalContext(analysis, referenceData) {
        const context = {
            genre: this.detectGenre(analysis, referenceData),
            energy: this.analyzeEnergyLevel(analysis),
            complexity: this.analyzeComplexity(analysis),
            targetAudience: this.inferTargetAudience(analysis),
            distributionFormat: this.inferDistributionFormat(analysis)
        };

        return context;
    }

    /**
     * üîç Detectar problemas com prioriza√ß√£o
     */
    detectIssuesWithPriority(analysis, referenceData, context) {
        const issues = [];
        
        // An√°lise de m√©tricas t√©cnicas
        const tech = analysis.technicalData || {};
        
        // LUFS Analysis
        if (tech.lufs !== undefined) {
            const genreTarget = this.musicalContexts[context.genre]?.lufsTarget || -10;
            const deviation = Math.abs(tech.lufs - genreTarget);
            
            if (deviation > 2) {
                issues.push({
                    type: 'loudness_deviation',
                    severity: deviation > 4 ? 'critical' : 'important',
                    current: tech.lufs,
                    target: genreTarget,
                    deviation: deviation,
                    impact: 'streaming_compatibility'
                });
            }
        }

        // True Peak Analysis
        if (tech.truePeak !== undefined && tech.truePeak > -1.0) {
            issues.push({
                type: 'true_peak_high',
                severity: tech.truePeak > -0.5 ? 'critical' : 'important',
                current: tech.truePeak,
                target: -1.0,
                impact: 'digital_distortion_risk'
            });
        }

        // Spectral Analysis
        if (tech.bandEnergies || tech.spectral_balance) {
            const spectralIssues = this.analyzeSpectralIssues(tech, context);
            issues.push(...spectralIssues);
        }

        return issues;
    }

    /**
     * üí° Gerar sugest√µes educativas
     */
    generateEducationalSuggestions(issues, context, userPreferences) {
        const suggestions = [];

        for (const issue of issues) {
            const suggestion = this.createEducationalSuggestion(issue, context, userPreferences);
            if (suggestion) {
                suggestions.push(suggestion);
            }
        }

        return suggestions;
    }

    /**
     * üéì Criar sugest√£o educativa individual
     */
    createEducationalSuggestion(issue, context, userPreferences) {
        const db = this.educationalDatabase;
        const solutions = this.solutionTemplates;
        
        switch (issue.type) {
            case 'loudness_deviation':
                const isLow = issue.current < issue.target;
                const template = isLow ? solutions.increaseLoudness : solutions.reduceLoudness;
                
                return {
                    id: `loudness_${isLow ? 'low' : 'high'}_${Date.now()}`,
                    category: 'loudness',
                    priority: this.calculatePriority(issue, context),
                    
                    // T√≠tulo educativo
                    title: isLow ? 
                        "üîä Aumentar Competitividade Comercial" : 
                        "üéµ Preservar Musicalidade Natural",
                    
                    // Problema identificado
                    problem: {
                        description: `LUFS atual (${issue.current.toFixed(1)}) est√° ${Math.abs(issue.deviation).toFixed(1)} unidades ${isLow ? 'abaixo' : 'acima'} do ideal para ${context.genre}`,
                        impact: isLow ? 
                            "Sua m√∫sica vai soar mais baixa que as refer√™ncias, perdendo impacto competitivo" :
                            "Risco de fadiga auditiva e compress√£o autom√°tica pelas plataformas",
                        visual: this.generateVisualIndicator(issue.current, issue.target, 'lufs')
                    },

                    // Contexto educativo
                    education: {
                        concept: db.lufs.concept,
                        explanation: db.lufs.explanation,
                        importance: db.lufs.importance,
                        genreContext: this.musicalContexts[context.genre]?.characteristics || "Caracter√≠sticas espec√≠ficas do g√™nero"
                    },

                    // Solu√ß√£o pr√°tica
                    solution: {
                        strategy: template.title,
                        steps: template.steps,
                        tools: template.dawSpecific,
                        warnings: template.warnings || [],
                        expectedResult: `LUFS target: ${issue.target} (¬±1 LU aceit√°vel)`
                    },

                    // Valida√ß√£o
                    validation: {
                        checkPoints: [
                            "‚úì Medir LUFS integrated final",
                            "‚úì Comparar com refer√™ncias do g√™nero",
                            "‚úì Testar em diferentes sistemas",
                            "‚úì Verificar que True Peak < -1.0 dBTP"
                        ],
                        tools: ["LUFS meter", "Reference tracks", "Multi-speaker testing"]
                    },

                    // Metadados
                    metadata: {
                        difficulty: isLow ? 'intermediate' : 'beginner',
                        timeEstimate: '30-60 minutos',
                        impact: issue.severity,
                        tags: ['loudness', 'mastering', 'streaming', context.genre]
                    }
                };

            case 'true_peak_high':
                return {
                    id: `truepeak_high_${Date.now()}`,
                    category: 'technical',
                    priority: this.calculatePriority(issue, context),
                    
                    title: "‚ö° Controlar True Peak - Evitar Distor√ß√£o Digital",
                    
                    problem: {
                        description: `True Peak de ${issue.current.toFixed(1)} dBTP est√° acima do limite seguro de -1.0 dBTP`,
                        impact: "Risco de distor√ß√£o aud√≠vel em DACs consumer, problemas de codifica√ß√£o e artefatos em streaming",
                        technical: "Inter-sample peaks podem causar clipping real mesmo que o medidor digital n√£o mostre"
                    },

                    education: {
                        concept: db.truePeak.concept,
                        explanation: db.truePeak.explanation,
                        importance: db.truePeak.importance,
                        why: "Conversores D/A reconstroem o sinal anal√≥gico, criando picos entre amostras digitais"
                    },

                    solution: {
                        strategy: "True Peak Limiting com Oversampling",
                        steps: [
                            "1. ‚ö° Ativar True Peak detection no limiter",
                            "2. üîÑ Usar oversampling 4x ou superior",
                            "3. üìä Ajustar ceiling para -1.0 dBTP",
                            "4. üéµ Compensar redu√ß√£o de gain se necess√°rio",
                            "5. ‚úÖ Verificar resultado com True Peak meter"
                        ],
                        tools: {
                            recommended: "FabFilter Pro-L 2, Ozone Maximizer, Waves L3",
                            dawNative: db.truePeak.dawExamples
                        },
                        settings: "Ceiling: -1.0 dBTP, Oversampling: 4x, Release: Auto/Musical"
                    },

                    validation: {
                        checkPoints: [
                            "‚úì True Peak meter showing < -1.0 dBTP",
                            "‚úì No audible artifacts from limiting",
                            "‚úì Loudness target maintained",
                            "‚úì Test on multiple playback systems"
                        ]
                    },

                    metadata: {
                        difficulty: 'beginner',
                        timeEstimate: '10-15 minutos',
                        impact: 'critical',
                        tags: ['truepeak', 'limiting', 'technical', 'safety']
                    }
                };

            default:
                return null;
        }
    }

    /**
     * üéì Enriquecer com explica√ß√µes adicionais
     */
    enrichWithExplanations(suggestions, context) {
        return suggestions.map(suggestion => {
            // Adicionar analogias e exemplos
            suggestion.analogies = this.generateAnalogies(suggestion.category);
            
            // Adicionar casos de uso reais
            suggestion.realWorldExamples = this.generateRealWorldExamples(suggestion.category, context.genre);
            
            // Adicionar troubleshooting
            suggestion.troubleshooting = this.generateTroubleshooting(suggestion.category);
            
            return suggestion;
        });
    }

    /**
     * üß† Prioriza√ß√£o inteligente
     */
    intelligentPrioritization(suggestions, userPreferences) {
        // Ordenar por prioridade, mas considerar contexto do usu√°rio
        return suggestions.sort((a, b) => {
            const priorityA = a.priority + this.getUserPreferenceBonus(a, userPreferences);
            const priorityB = b.priority + this.getUserPreferenceBonus(b, userPreferences);
            
            return priorityB - priorityA;
        });
    }

    /**
     * üìä Calcular prioridade baseada em impacto
     */
    calculatePriority(issue, context) {
        const matrix = this.priorityMatrix;
        
        let basePriority = 0.5;
        
        // Severidade
        switch (issue.severity) {
            case 'critical': basePriority = 1.0; break;
            case 'important': basePriority = 0.8; break;
            case 'moderate': basePriority = 0.6; break;
            default: basePriority = 0.4;
        }

        // Contexto de distribui√ß√£o
        if (context.distributionFormat === 'streaming') {
            if (['loudness_deviation', 'true_peak_high'].includes(issue.type)) {
                basePriority += 0.1;
            }
        }

        return Math.min(1.0, basePriority);
    }

    /**
     * üé® Gerar indicador visual para m√©tricas
     */
    generateVisualIndicator(current, target, type) {
        const diff = current - target;
        const percentage = Math.abs(diff / target) * 100;
        
        return {
            current: current.toFixed(1),
            target: target.toFixed(1),
            difference: diff.toFixed(1),
            percentageOff: percentage.toFixed(1),
            direction: diff > 0 ? 'above' : 'below',
            severity: percentage > 20 ? 'high' : percentage > 10 ? 'medium' : 'low'
        };
    }

    /**
     * üéØ Detectar g√™nero musical
     */
    detectGenre(analysis, referenceData) {
        // Tentar extrair do contexto ou usar padr√£o
        if (window.PROD_AI_REF_GENRE) {
            return window.PROD_AI_REF_GENRE.toLowerCase();
        }
        
        // Fallback: analisar caracter√≠sticas espectrais
        const tech = analysis.technicalData || {};
        
        if (tech.spectral_balance) {
            const bass = tech.spectral_balance.bass || tech.spectral_balance.low_bass || 0;
            const sub = tech.spectral_balance.sub || 0;
            
            if (sub < -20 && bass < -15) {
                return 'electronic';
            } else if (bass > -10) {
                return 'hiphop';
            }
        }
        
        return 'pop'; // Default seguro
    }

    /**
     * ‚ö° Analisar n√≠vel de energia
     */
    analyzeEnergyLevel(analysis) {
        const tech = analysis.technicalData || {};
        
        if (tech.lufs && tech.dynamicRange) {
            if (tech.lufs > -8 && tech.dynamicRange < 6) {
                return 'high';
            } else if (tech.lufs < -15 && tech.dynamicRange > 12) {
                return 'low';
            }
        }
        
        return 'medium';
    }

    /**
     * üß© Analisar complexidade
     */
    analyzeComplexity(analysis) {
        // Baseado na variedade espectral e din√¢mica
        const tech = analysis.technicalData || {};
        
        if (tech.spectral_balance) {
            const bands = Object.values(tech.spectral_balance);
            const variation = this.calculateVariation(bands);
            
            if (variation > 15) return 'high';
            if (variation < 5) return 'low';
        }
        
        return 'medium';
    }

    /**
     * üéß Inferir p√∫blico-alvo
     */
    inferTargetAudience(analysis) {
        const tech = analysis.technicalData || {};
        
        if (tech.dynamicRange && tech.dynamicRange > 12) {
            return 'audiophile';
        } else if (tech.lufs && tech.lufs > -9) {
            return 'commercial';
        }
        
        return 'general';
    }

    /**
     * üì± Inferir formato de distribui√ß√£o
     */
    inferDistributionFormat(analysis) {
        const tech = analysis.technicalData || {};
        
        // Baseado em caracter√≠sticas t√≠picas
        if (tech.lufs && tech.lufs > -12 && tech.lufs < -8) {
            return 'streaming';
        } else if (tech.dynamicRange && tech.dynamicRange > 10) {
            return 'physical';
        }
        
        return 'digital';
    }

    /**
     * üìä Calcular varia√ß√£o em array
     */
    calculateVariation(values) {
        if (!values || values.length === 0) return 0;
        
        const validValues = values.filter(v => Number.isFinite(v));
        if (validValues.length === 0) return 0;
        
        const max = Math.max(...validValues);
        const min = Math.min(...validValues);
        
        return max - min;
    }

    /**
     * üîç Analisar problemas espectrais
     */
    analyzeSpectralIssues(tech, context) {
        const issues = [];
        const bands = tech.bandEnergies || tech.spectral_balance || {};
        
        // Detectar masking nos graves
        if (bands.sub && bands.bass) {
            const subLevel = bands.sub.rms_db || bands.sub;
            const bassLevel = bands.bass.rms_db || bands.bass;
            
            if (typeof subLevel === 'number' && typeof bassLevel === 'number') {
                if (Math.abs(subLevel - bassLevel) < 3) {
                    issues.push({
                        type: 'bass_masking',
                        severity: 'important',
                        frequencies: ['sub', 'bass'],
                        impact: 'clarity_loss'
                    });
                }
            }
        }

        // Detectar harshness nos m√©dios-altos
        if (bands.highMid || bands.high_mid) {
            const level = bands.highMid?.rms_db || bands.high_mid;
            
            if (typeof level === 'number' && level > -8) {
                issues.push({
                    type: 'harshness',
                    severity: level > -5 ? 'critical' : 'important',
                    frequency: 4000,
                    impact: 'listening_fatigue'
                });
            }
        }

        return issues;
    }

    /**
     * üîß Gerar analogias educativas
     */
    generateAnalogies(category) {
        const analogies = {
            loudness: [
                "üí° LUFS √© como o brilho de uma l√¢mpada - n√£o importa a pot√™ncia (watts), mas o quanto ilumina o ambiente",
                "üìª Como o volume do r√°dio - mesmo que voc√™ gire o knob, a esta√ß√£o j√° vem com seu volume 'natural'"
            ],
            technical: [
                "üåä True Peak √© como ondas do mar - podem ser maiores que parecem quando vistas de longe",
                "üì∏ Como fotos digitais - o que voc√™ v√™ na tela pode n√£o ser exatamente o que imprime"
            ],
            spectral: [
                "üé® EQ √© como pintura - cada frequ√™ncia √© uma cor que comp√µe o quadro final",
                "üè† Mix √© como arquitetura - cada banda de frequ√™ncia √© um andar do pr√©dio"
            ]
        };

        return analogies[category] || [];
    }

    /**
     * üåü Gerar exemplos do mundo real
     */
    generateRealWorldExamples(category, genre) {
        const examples = {
            loudness: {
                electronic: ["Daft Punk - Random Access Memories (dynamic)", "Skrillex - Bangarang (compressed)"],
                rock: ["Led Zeppelin - IV (natural)", "Metallica - Death Magnetic (over-compressed)"],
                pop: ["Taylor Swift - 1989 (commercial)", "Billie Eilish - Bad Guy (modern)"]
            }
        };

        return examples[category]?.[genre] || [];
    }

    /**
     * üõ†Ô∏è Gerar troubleshooting
     */
    generateTroubleshooting(category) {
        const troubleshooting = {
            loudness: [
                "‚ùå Problema: Limiter n√£o consegue mais aumentar loudness ‚Üí ‚úÖ Solu√ß√£o: EQ subtrativo primeiro",
                "‚ùå Problema: Som fica 'espremido' ‚Üí ‚úÖ Solu√ß√£o: Menos ratio, mais stages de compress√£o",
                "‚ùå Problema: Perde punch ‚Üí ‚úÖ Solu√ß√£o: Preservar transientes com attack lento"
            ],
            technical: [
                "‚ùå Problema: True Peak ainda alto ‚Üí ‚úÖ Solu√ß√£o: Verificar se oversampling est√° ativo",
                "‚ùå Problema: Som muda com limiting ‚Üí ‚úÖ Solu√ß√£o: Ajustar release para musical"
            ]
        };

        return troubleshooting[category] || [];
    }

    /**
     * üë§ Obter b√¥nus de prefer√™ncia do usu√°rio
     */
    getUserPreferenceBonus(suggestion, userPreferences) {
        // Sistema futuro para aprender prefer√™ncias do usu√°rio
        return 0;
    }

    /**
     * üìã Gerar resumo executivo
     */
    generateSummary(suggestions, context) {
        const categories = {};
        suggestions.forEach(s => {
            if (!categories[s.category]) categories[s.category] = 0;
            categories[s.category]++;
        });

        const topPriority = suggestions[0];
        
        return {
            overview: `${suggestions.length} melhorias identificadas para ${context.genre}`,
            topPriority: topPriority?.title || "Nenhuma prioridade cr√≠tica",
            categories: categories,
            estimatedTime: this.calculateTotalTime(suggestions),
            difficulty: this.calculateAverageDifficulty(suggestions)
        };
    }

    /**
     * ‚è±Ô∏è Calcular tempo total estimado
     */
    calculateTotalTime(suggestions) {
        // Baseado nos metadados de tempo de cada sugest√£o
        return "60-120 minutos"; // Placeholder
    }

    /**
     * üìä Calcular dificuldade m√©dia
     */
    calculateAverageDifficulty(suggestions) {
        const difficulties = suggestions.map(s => s.metadata?.difficulty).filter(Boolean);
        // L√≥gica para calcular m√©dia
        return "Intermedi√°rio"; // Placeholder
    }

    /**
     * üö® Gerar sugest√µes fallback em caso de erro
     */
    generateFallbackSuggestions(analysis) {
        return [{
            title: "üîß Verifica√ß√£o T√©cnica B√°sica",
            description: "Revisar n√≠veis b√°sicos e evitar clipping",
            category: "safety",
            priority: 1.0
        }];
    }

    /**
     * ‚öôÔ∏è Obter prefer√™ncias padr√£o do usu√°rio
     */
    getDefaultPreferences() {
        return {
            experienceLevel: 'intermediate',
            preferredStyle: 'detailed',
            timeAvailable: 'moderate',
            priorityFocus: 'balanced'
        };
    }
}

// üåç Disponibilizar globalmente
window.AdvancedEducationalSuggestionSystem = AdvancedEducationalSuggestionSystem;

// üéØ Criar inst√¢ncia global
window.advancedSuggestionSystem = new AdvancedEducationalSuggestionSystem();

console.log('üéì AdvancedEducationalSuggestionSystem carregado com sucesso!');
console.log('üìö Acesse via: window.advancedSuggestionSystem');