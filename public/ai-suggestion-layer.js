// ü§ñ AI SUGGESTION LAYER - Camada Inteligente de Sugest√µes SoundyAI
// Sistema de p√≥s-processamento que enriquece sugest√µes existentes com IA
// SEGURAN√áA: Nunca substitui o sistema atual - apenas enriquece
// Baseado na auditoria: AUDITORIA_SISTEMA_SUGESTOES_COMPLETA.md

class AISuggestionLayer {
    constructor() {
        this.apiKey = null;
        this.model = 'gpt-3.5-turbo'; // Default, pode ser alterado para gpt-4 (Pro)
        this.maxRetries = 3;
        this.timeout = 10000; // 10 segundos
        this.rateLimitDelay = 1000; // 1 segundo entre chamadas
        this.lastRequestTime = 0;
        
        // Cache para evitar chamadas desnecess√°rias
        this.cache = new Map();
        this.cacheExpiry = 5 * 60 * 1000; // 5 minutos
        
        // Estat√≠sticas para monitoramento
        this.stats = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            cacheHits: 0,
            averageResponseTime: 0
        };
        
        console.log('ü§ñ [AI-LAYER] Sistema de IA inicializado - Modo: ' + this.model);
        
        // Auto-configurar API key se dispon√≠vel
        this.autoConfigureApiKey();
    }
    
    /**
     * üîë Auto-configura√ß√£o da API Key
     * Procura por chave em vari√°veis globais ou localStorage
     */
    autoConfigureApiKey() {
        // Prioridade: vari√°vel global > localStorage > prompt do usu√°rio
        const globalKey = window.OPENAI_API_KEY || window.AI_API_KEY;
        const storedKey = localStorage.getItem('soundyai_openai_key');
        
        if (globalKey) {
            this.apiKey = globalKey;
            console.log('üîë [AI-LAYER] API Key encontrada em vari√°veis globais');
        } else if (storedKey) {
            this.apiKey = storedKey;
            console.log('üîë [AI-LAYER] API Key encontrada no localStorage');
        } else {
            console.warn('‚ö†Ô∏è [AI-LAYER] API Key n√£o encontrada. Use setApiKey() ou configure manualmente.');
        }
    }
    
    /**
     * üîß Configurar API Key manualmente
     */
    setApiKey(key, model = 'gpt-3.5-turbo') {
        this.apiKey = key;
        this.model = model;
        
        // Salvar no localStorage para persist√™ncia
        localStorage.setItem('soundyai_openai_key', key);
        localStorage.setItem('soundyai_ai_model', model);
        
        console.log(`üîë [AI-LAYER] API Key configurada - Modelo: ${model}`);
    }
    
    /**
     * üöÄ FUN√á√ÉO PRINCIPAL: Processar sugest√µes existentes com IA
     * Esta √© a fun√ß√£o chamada pelo sistema principal
     */
    async process(existingSuggestions, analysisContext) {
        const startTime = performance.now();
        
        try {
            // Valida√ß√µes iniciais
            if (!this.apiKey) {
                console.warn('‚ö†Ô∏è [AI-LAYER] API Key n√£o configurada - usando sugest√µes originais');
                return existingSuggestions;
            }
            
            if (!existingSuggestions || existingSuggestions.length === 0) {
                console.warn('‚ö†Ô∏è [AI-LAYER] Nenhuma sugest√£o para processar');
                return existingSuggestions;
            }
            
            // Verificar cache
            const cacheKey = this.generateCacheKey(existingSuggestions, analysisContext);
            const cached = this.getFromCache(cacheKey);
            if (cached) {
                this.stats.cacheHits++;
                console.log('üíæ [AI-LAYER] Resultado encontrado no cache');
                return cached;
            }
            
            // Rate limiting
            await this.enforceRateLimit();
            
            // Preparar dados para IA
            const aiInput = this.prepareAIInput(existingSuggestions, analysisContext);
            
            // Chamar IA
            this.stats.totalRequests++;
            const aiResponse = await this.callOpenAI(aiInput);
            
            // Processar resposta
            const enhancedSuggestions = this.processAIResponse(aiResponse, existingSuggestions);
            
            // Atualizar cache e estat√≠sticas
            this.saveToCache(cacheKey, enhancedSuggestions);
            this.stats.successfulRequests++;
            
            const responseTime = performance.now() - startTime;
            this.updateAverageResponseTime(responseTime);
            
            console.log(`ü§ñ [AI-LAYER] Processamento conclu√≠do em ${responseTime.toFixed(0)}ms`);
            console.log(`üìä [AI-LAYER] ${existingSuggestions.length} ‚Üí ${enhancedSuggestions.length} sugest√µes`);
            
            return enhancedSuggestions;
            
        } catch (error) {
            this.stats.failedRequests++;
            console.error('‚ùå [AI-LAYER] Erro no processamento:', error);
            
            // FALLBACK CR√çTICO: Sempre retornar sugest√µes originais em caso de erro
            console.log('üõ°Ô∏è [AI-LAYER] Usando fallback - sugest√µes originais mantidas');
            return existingSuggestions;
        }
    }
    
    /**
     * üìù Preparar input estruturado para a IA
     */
    prepareAIInput(suggestions, context) {
        // Extrair m√©tricas principais do contexto
        const metrics = this.extractMetrics(context);
        
        // Extrair informa√ß√µes de g√™nero e refer√™ncia
        const genreInfo = this.extractGenreInfo(context);
        
        // Categorizar sugest√µes por tipo
        const categorizedSuggestions = this.categorizeSuggestions(suggestions);
        
        return {
            role: "system",
            content: this.buildSystemPrompt(),
            user_input: {
                metrics: metrics,
                genre: genreInfo,
                suggestions: categorizedSuggestions,
                context: {
                    timestamp: new Date().toISOString(),
                    version: 'SoundyAI_v2.0_AI_Enhanced'
                }
            }
        };
    }
    
    /**
     * üéØ Extrair m√©tricas principais para contexto da IA
     */
    extractMetrics(context) {
        const tech = context?.technicalData || {};
        
        return {
            // M√©tricas principais de loudness
            lufs: tech.lufsIntegrated || tech.lufs || null,
            truePeak: tech.truePeakDbtp || tech.true_peak || null,
            dynamicRange: tech.dynamicRange || tech.dr || null,
            lra: tech.lra || null,
            
            // M√©tricas espectrais
            stereoCorrelation: tech.stereoCorrelation || tech.stereo || null,
            stereoWidth: tech.stereoWidth || null,
            spectralCentroid: tech.spectralCentroidHz || null,
            
            // Bandas espectrais (se dispon√≠veis)
            bands: tech.bandEnergies ? {
                sub: tech.bandEnergies.sub?.rms_db,
                bass: tech.bandEnergies.low_bass?.rms_db,
                lowMid: tech.bandEnergies.upper_bass?.rms_db,
                mid: tech.bandEnergies.mid?.rms_db,
                highMid: tech.bandEnergies.high_mid?.rms_db,
                presence: tech.bandEnergies.presenca?.rms_db,
                air: tech.bandEnergies.brilho?.rms_db
            } : null,
            
            // Problemas detectados
            detectedIssues: this.extractDetectedIssues(context)
        };
    }
    
    /**
     * üéµ Extrair informa√ß√µes de g√™nero e refer√™ncia
     */
    extractGenreInfo(context) {
        return {
            genre: context?.genre || window.__activeRefGenre || 'unknown',
            referenceTargets: window.__activeRefData ? {
                lufs: window.__activeRefData.lufs_target,
                truePeak: window.__activeRefData.true_peak_target,
                dr: window.__activeRefData.dr_target,
                lra: window.__activeRefData.lra_target
            } : null
        };
    }
    
    /**
     * üìÇ Categorizar sugest√µes por tipo para melhor processamento
     */
    categorizeSuggestions(suggestions) {
        const categories = {
            loudness: [],
            dynamics: [],
            spectral: [],
            stereo: [],
            technical: [],
            other: []
        };
        
        suggestions.forEach(suggestion => {
            const type = suggestion.type || '';
            const metric = suggestion.metric || '';
            const message = (suggestion.message || suggestion.problem || '').toLowerCase();
            
            if (type.includes('loudness') || metric.includes('lufs') || message.includes('lufs') || message.includes('volume')) {
                categories.loudness.push(suggestion);
            } else if (type.includes('dynamics') || metric.includes('dr') || message.includes('din√¢mica') || message.includes('lra')) {
                categories.dynamics.push(suggestion);
            } else if (type.includes('spectral') || type.includes('band') || message.includes('banda') || message.includes('frequ√™ncia')) {
                categories.spectral.push(suggestion);
            } else if (type.includes('stereo') || message.includes('est√©reo') || message.includes('largura')) {
                categories.stereo.push(suggestion);
            } else if (message.includes('peak') || message.includes('pico') || message.includes('clipping')) {
                categories.technical.push(suggestion);
            } else {
                categories.other.push(suggestion);
            }
        });
        
        return categories;
    }
    
    /**
     * üîç Extrair problemas detectados pelo sistema heur√≠stico
     */
    extractDetectedIssues(context) {
        const issues = [];
        
        // Verificar se h√° problemas detectados
        if (context?.problems && Array.isArray(context.problems)) {
            issues.push(...context.problems.map(p => p.type || p.message || p));
        }
        
        // Verificar sugest√µes heur√≠sticas
        if (context?.suggestions) {
            context.suggestions.forEach(s => {
                if (s.type && s.type.startsWith('heuristic_')) {
                    issues.push(s.type.replace('heuristic_', ''));
                }
            });
        }
        
        return issues;
    }
    
    /**
     * üé® Construir prompt sistem√°tico para a IA
     */
    buildSystemPrompt() {
        return `Voc√™ √© um especialista em produ√ß√£o musical e masteriza√ß√£o trabalhando no sistema SoundyAI. 

Sua fun√ß√£o √© analisar dados t√©cnicos de √°udio e sugest√µes de melhoria j√° geradas pelo sistema, e criar explica√ß√µes educacionais estruturadas.

IMPORTANTE: Voc√™ deve retornar um JSON v√°lido com este formato exato:

{
  "enhanced_suggestions": [
    {
      "id": "unique_id",
      "category": "loudness|dynamics|spectral|stereo|technical",
      "priority": 1-10,
      "blocks": {
        "problema": "‚ö†Ô∏è Descri√ß√£o clara do problema t√©cnico",
        "causa": "üéØ Explica√ß√£o da causa prov√°vel",
        "solucao": "üõ†Ô∏è Passos pr√°ticos espec√≠ficos para resolver",
        "dica": "üí° Dica profissional ou contextual adicional"
      },
      "technical_details": {
        "frequency_range": "se aplic√°vel",
        "tools_suggested": ["lista", "de", "ferramentas"],
        "difficulty": "iniciante|intermedi√°rio|avan√ßado"
      }
    }
  ],
  "summary": {
    "total_issues": 0,
    "priority_distribution": {"high": 0, "medium": 0, "low": 0},
    "main_focus_areas": ["√°rea1", "√°rea2"]
  }
}

DIRETRIZES:
- Use linguagem educativa e amig√°vel, como um mentor experiente
- Seja espec√≠fico e pr√°tico nas solu√ß√µes
- Mencione ferramentas e t√©cnicas reais
- Adapte explica√ß√µes ao n√≠vel t√©cnico apropriado
- Foque no resultado musical, n√£o apenas nos n√∫meros
- Use termos em portugu√™s brasileiro`;
    }
    
    /**
     * üåê Chamar API da OpenAI
     */
    async callOpenAI(input) {
        const requestBody = {
            model: this.model,
            messages: [
                {
                    role: "system",
                    content: input.content
                },
                {
                    role: "user", 
                    content: `Analise estes dados de √°udio e sugest√µes, e crie explica√ß√µes educacionais estruturadas:

M√âTRICAS T√âCNICAS:
${JSON.stringify(input.user_input.metrics, null, 2)}

G√äNERO MUSICAL:
${JSON.stringify(input.user_input.genre, null, 2)}

SUGEST√ïES ATUAIS:
${JSON.stringify(input.user_input.suggestions, null, 2)}

Gere explica√ß√µes educacionais seguindo exatamente o formato JSON especificado.`
                }
            ],
            max_tokens: 2000,
            temperature: 0.7,
            response_format: { type: "json_object" }
        };
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.apiKey}`
            },
            body: JSON.stringify(requestBody)
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`OpenAI API Error: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        return data.choices[0].message.content;
    }
    
    /**
     * üîÑ Processar resposta da IA e mesclar com sugest√µes originais
     */
    processAIResponse(aiResponse, originalSuggestions) {
        try {
            const parsedResponse = JSON.parse(aiResponse);
            const enhancedSuggestions = parsedResponse.enhanced_suggestions || [];
            
            // Criar sugest√µes enriquecidas mantendo estrutura original
            const processed = enhancedSuggestions.map((aiSuggestion, index) => {
                const originalSuggestion = originalSuggestions[index] || {};
                
                return {
                    // Manter dados originais
                    ...originalSuggestion,
                    
                    // Adicionar enriquecimento da IA
                    ai_enhanced: true,
                    ai_blocks: aiSuggestion.blocks,
                    ai_category: aiSuggestion.category,
                    ai_priority: aiSuggestion.priority,
                    ai_technical_details: aiSuggestion.technical_details,
                    
                    // Manter compatibilidade com sistema existente
                    title: aiSuggestion.blocks?.problema || originalSuggestion.title || originalSuggestion.message,
                    description: aiSuggestion.blocks?.solucao || originalSuggestion.description || originalSuggestion.action
                };
            });
            
            // Se h√° mais sugest√µes originais que processadas pela IA, manter as extras
            if (originalSuggestions.length > enhancedSuggestions.length) {
                const remaining = originalSuggestions.slice(enhancedSuggestions.length);
                processed.push(...remaining.map(s => ({...s, ai_enhanced: false})));
            }
            
            return processed;
            
        } catch (error) {
            console.error('‚ùå [AI-LAYER] Erro ao processar resposta da IA:', error);
            // Fallback: retornar sugest√µes originais
            return originalSuggestions.map(s => ({...s, ai_enhanced: false}));
        }
    }
    
    /**
     * ‚è±Ô∏è Controle de rate limiting
     */
    async enforceRateLimit() {
        const now = Date.now();
        const timeSinceLastRequest = now - this.lastRequestTime;
        
        if (timeSinceLastRequest < this.rateLimitDelay) {
            const waitTime = this.rateLimitDelay - timeSinceLastRequest;
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        
        this.lastRequestTime = Date.now();
    }
    
    /**
     * üíæ Sistema de cache
     */
    generateCacheKey(suggestions, context) {
        const keyData = {
            suggestions: suggestions.map(s => s.type + '_' + (s.metric || '')).join('|'),
            lufs: context?.technicalData?.lufsIntegrated,
            genre: context?.genre || window.__activeRefGenre
        };
        
        return btoa(JSON.stringify(keyData)).slice(0, 32);
    }
    
    getFromCache(key) {
        const cached = this.cache.get(key);
        if (cached && (Date.now() - cached.timestamp) < this.cacheExpiry) {
            return cached.data;
        }
        
        this.cache.delete(key);
        return null;
    }
    
    saveToCache(key, data) {
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
        
        // Limpar cache expirado
        if (this.cache.size > 50) {
            const oldestKeys = Array.from(this.cache.keys()).slice(0, 10);
            oldestKeys.forEach(k => this.cache.delete(k));
        }
    }
    
    /**
     * üìä Atualizar estat√≠sticas
     */
    updateAverageResponseTime(responseTime) {
        if (this.stats.averageResponseTime === 0) {
            this.stats.averageResponseTime = responseTime;
        } else {
            this.stats.averageResponseTime = (this.stats.averageResponseTime + responseTime) / 2;
        }
    }
    
    /**
     * üìà Obter estat√≠sticas de uso
     */
    getStats() {
        const successRate = this.stats.totalRequests > 0 ? 
            (this.stats.successfulRequests / this.stats.totalRequests * 100).toFixed(1) : 0;
            
        return {
            ...this.stats,
            successRate: successRate + '%',
            cacheSize: this.cache.size,
            model: this.model,
            hasApiKey: !!this.apiKey
        };
    }
    
    /**
     * üßπ Limpeza de recursos
     */
    cleanup() {
        this.cache.clear();
        console.log('üßπ [AI-LAYER] Cache limpo');
    }
}

// üåç Inicializa√ß√£o global e configura√ß√£o de feature flags
(function() {
    'use strict';
    
    // Feature flag principal
    if (typeof window.AI_SUGGESTION_LAYER_ENABLED === 'undefined') {
        window.AI_SUGGESTION_LAYER_ENABLED = true; // Ativado por padr√£o
    }
    
    // Inst√¢ncia global
    window.aiSuggestionLayer = new AISuggestionLayer();
    
    // Fun√ß√£o de configura√ß√£o r√°pida para desenvolvedores
    window.configureAI = function(apiKey, model = 'gpt-3.5-turbo') {
        window.aiSuggestionLayer.setApiKey(apiKey, model);
        window.AI_SUGGESTION_LAYER_ENABLED = true;
        console.log('ü§ñ [AI-LAYER] Configura√ß√£o conclu√≠da!');
    };
    
    // Fun√ß√£o para alternar IA
    window.toggleAI = function(enabled = null) {
        window.AI_SUGGESTION_LAYER_ENABLED = enabled !== null ? enabled : !window.AI_SUGGESTION_LAYER_ENABLED;
        console.log(`ü§ñ [AI-LAYER] ${window.AI_SUGGESTION_LAYER_ENABLED ? 'ATIVADA' : 'DESATIVADA'}`);
        return window.AI_SUGGESTION_LAYER_ENABLED;
    };
    
    // Fun√ß√£o para obter estat√≠sticas
    window.getAIStats = function() {
        return window.aiSuggestionLayer.getStats();
    };
    
    // Logs de inicializa√ß√£o
    console.log('ü§ñ [AI-LAYER] Sistema carregado com sucesso');
    console.log('üîß [AI-LAYER] Use configureAI("sua-api-key") para configurar');
    console.log('‚ö° [AI-LAYER] Use toggleAI() para ativar/desativar');
    console.log('üìä [AI-LAYER] Use getAIStats() para ver estat√≠sticas');
    
})();