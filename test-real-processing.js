/**
 * üîç TESTE: Verificar erros reais sem fallbacks
 * 
 * Com os fallbacks removidos, vamos ver qual √© o erro real que impede
 * o c√°lculo das m√©tricas espectrais na produ√ß√£o.
 */

console.log('üß™ TESTE: An√°lise de √°udio SEM FALLBACKS');
console.log('=' .repeat(60));

// Simular um processamento real
async function testRealProcessing() {
  console.log('üéµ Simulando an√°lise de √°udio real...');
  
  try {
    // Importar as depend√™ncias do pipeline
    const path = await import('path');
    const fs = await import('fs');
    
    // Simular estrutura de arquivo de teste
    const testFile = {
      originalname: 'test-audio.wav',
      buffer: Buffer.alloc(1024), // Buffer vazio para teste
      mimetype: 'audio/wav'
    };
    
    console.log('üîó Arquivo de teste criado');
    
    // Tentar importar e executar o pipeline
    const { segmentAudioTemporal } = await import('./api/audio/temporal-segmentation.js');
    const { CoreMetricsProcessor } = await import('./api/audio/core-metrics.js');
    const { generateJSONOutput } = await import('./api/audio/json-output.js');
    
    console.log('‚úÖ M√≥dulos importados com sucesso');
    
    // Executar pipeline completo
    console.log('üöÄ Iniciando pipeline completo...');
    
    // Fase 5.2: Segmenta√ß√£o
    console.log('üìä Fase 5.2: Segmenta√ß√£o...');
    
    // Criar um mock de √°udio decodificado (similar ao que vem da Fase 5.1)
    const mockAudioBuffer = {
      sampleRate: 48000,
      leftChannel: new Float32Array(48000),  // 1 segundo de √°udio silencioso - canal esquerdo
      rightChannel: new Float32Array(48000), // 1 segundo de √°udio silencioso - canal direito
      numberOfChannels: 2,
      length: 48000,
      duration: 1.0 // 1 segundo
    };
    
    const segmentedAudio = segmentAudioTemporal(mockAudioBuffer);
    
    // Fase 5.3: Core Metrics  
    console.log('üßÆ Fase 5.3: Core Metrics...');
    const processor = new CoreMetricsProcessor();
    const coreMetrics = await processor.processMetrics(segmentedAudio);
    
    // Fase 5.4: JSON Output
    console.log('üìù Fase 5.4: JSON Output...');
    const jsonOutput = generateJSONOutput(coreMetrics);
    
    console.log('‚úÖ Pipeline executado com sucesso!');
    console.log('üìä M√©tricas espectrais presentes:', {
      fftAggregated: !!coreMetrics.fft?.aggregated,
      spectralCentroidHz: jsonOutput.technicalData.spectralCentroidHz,
      spectralRolloffHz: jsonOutput.technicalData.spectralRolloffHz,
      bandEnergies: !!jsonOutput.technicalData.bandEnergies
    });
    
    return jsonOutput;
    
  } catch (error) {
    console.error('‚ùå ERRO NO PIPELINE:', error.message);
    console.error('‚ùå Stack trace:', error.stack);
    
    // Identificar onde exatamente falhou
    if (error.message.includes('FFT')) {
      console.error('üîç DIAGN√ìSTICO: Erro relacionado ao FFT processing');
    }
    if (error.message.includes('spectrum')) {
      console.error('üîç DIAGN√ìSTICO: Erro no SpectrumAnalyzer');
    }
    if (error.message.includes('segment')) {
      console.error('üîç DIAGN√ìSTICO: Erro na segmenta√ß√£o de √°udio');
    }
    
    throw error;
  }
}

// Executar teste
testRealProcessing()
  .then(result => {
    console.log('\nüéØ RESULTADO DO TESTE:');
    console.log('‚úÖ Pipeline funcionou - m√©tricas espectrais calculadas com sucesso');
    console.log('üìä JSON completo:', JSON.stringify(result.technicalData, null, 2));
  })
  .catch(error => {
    console.log('\n‚ùå TESTE FALHOU:');
    console.log('‚ùå Erro capturado:', error.message);
    console.log('‚ùå Agora sabemos onde est√° o problema real!');
  });