/**
 * üö® AUDITORIA FINAL: Railway vs Local
 * 
 * Descobrir por que o Railway sempre usa fallback mas local funciona
 */

console.log("üö® [AUDITORIA FINAL] Analisando diferen√ßas Railway vs Local...");

console.log("\nüìä ENVIRONMENT VARIABLES:");
console.log("NODE_ENV:", process.env.NODE_ENV);
console.log("DATABASE_URL exists:", !!process.env.DATABASE_URL);
console.log("B2_KEY_ID exists:", !!process.env.B2_KEY_ID);
console.log("B2_APP_KEY exists:", !!process.env.B2_APP_KEY);
console.log("B2_BUCKET_NAME:", process.env.B2_BUCKET_NAME);
console.log("B2_ENDPOINT:", process.env.B2_ENDPOINT);

console.log("\nüîç POSS√çVEIS CAUSAS DO FALLBACK NO RAILWAY:");

console.log("\n1Ô∏è‚É£ ERRO DE IMPORTA√á√ÉO:");
console.log("   - music-metadata pode estar faltando no Railway");
console.log("   - AWS SDK pode ter erro de vers√£o");
console.log("   - Timeout de rede S3");

console.log("\n2Ô∏è‚É£ ERRO DE EXECU√á√ÉO:");
console.log("   - Pipeline pode estar falhando silenciosamente");
console.log("   - Erro de mem√≥ria (√°udios grandes)");
console.log("   - Timeout de processamento");

console.log("\n3Ô∏è‚É£ ERRO DE CONFIGURA√á√ÉO:");
console.log("   - S3 endpoint diferente"); 
console.log("   - Credenciais Railway vs Local");

// Testar importa√ß√µes cr√≠ticas
console.log("\nüß™ TESTANDO IMPORTA√á√ïES:");

try {
    const AWS = await import("aws-sdk");
    console.log("‚úÖ AWS SDK importado com sucesso");
} catch (error) {
    console.log("‚ùå AWS SDK erro:", error.message);
}

try {
    const mm = await import("music-metadata");
    console.log("‚úÖ music-metadata importado com sucesso");
} catch (error) {
    console.log("‚ùå music-metadata erro:", error.message);
}

// Simular exatamente o que acontece no Railway
console.log("\nüîß SIMULANDO EXATAMENTE O RAILWAY:");

// Reproduzir o bloco try-catch do index.js
async function simulateRailwayExecution() {
    const job = {
        id: "railway-test",
        file_key: "uploads/1757641137308.wav",
        filename: "test.wav"
    };
    
    // Simular vari√°vel processAudioComplete
    let processAudioComplete = null;
    
    // Definir fun√ß√£o (como no Railway)
    async function simulateCompleteAnalysis(audioBuffer, filename, genre) {
        console.log("üéØ [RAILWAY-SIM] Executando pipeline...");
        
        // POSS√çVEL PONTO DE FALHA: Timeout ou erro silencioso
        throw new Error("Simulated Railway failure");
        
        return { status: "success" };
    }
    
    processAudioComplete = simulateCompleteAnalysis;
    
    console.log("processAudioComplete definido:", !!processAudioComplete);
    
    // Tentar executar (como no Railway)
    let result;
    
    try {
        if (processAudioComplete) {
            console.log("üéØ Usando pipeline completo");
            
            // Simular dados
            const audioBuffer = Buffer.alloc(1000000); // 1MB
            
            result = await processAudioComplete(audioBuffer, job.filename, "electronic");
            
            console.log("‚úÖ Pipeline completo processou com sucesso");
        } else {
            throw new Error("processAudioComplete n√£o definido");
        }
        
    } catch (error) {
        console.error("‚ùå ERRO capturado (Railway behavior):", error.message);
        
        console.log("‚ö†Ô∏è Caindo para fallback metadata...");
        
        // Fallback (exatamente como Railway faz)
        result = {
            ok: true,
            file: job.file_key,
            mode: "fallback_metadata",
            score: 50,
            status: "success",
            warnings: ["Pipeline completo indispon√≠vel. Resultado m√≠nimo via metadata."],
            usedFallback: true,
            scoringMethod: "error_fallback",
            technicalData: {
                bitrate: 1411200,
                channels: 2,
                sampleRate: 44100,
                durationSec: 112.61
            },
            classification: "B√°sico",
            frontendCompatible: true
        };
    }
    
    return result;
}

const railwayResult = await simulateRailwayExecution();

console.log("\nüìä RESULTADO RAILWAY SIMULADO:");
console.log(JSON.stringify(railwayResult, null, 2));

console.log("\nüéØ CONCLUS√ïES:");
console.log("1. Railway est√° executando fallback por algum erro silencioso");
console.log("2. Local funciona porque n√£o h√° o erro espec√≠fico do Railway");
console.log("3. Precisamos investigar logs do Railway para ver o erro real");

console.log("\nüîß CORRE√á√ÉO SUGERIDA:");
console.log("1. Adicionar logs detalhados no index.js Railway");
console.log("2. Capturar erro espec√≠fico que causa fallback"); 
console.log("3. Verificar se √© timeout, mem√≥ria ou importa√ß√£o");
console.log("4. Implementar retry logic ou fix espec√≠fico");
