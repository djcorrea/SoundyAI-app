// validate-integration.js - VALIDA√á√ÉO FINAL DA INTEGRA√á√ÉO
import "dotenv/config";
import { audioQueue, getQueueStats } from './work/queue/redis.js';

console.log('üéØ [VALIDATION] Valida√ß√£o final da integra√ß√£o API ‚Üî Worker Redis...\n');

async function validateRedisConnection() {
  try {
    console.log('1Ô∏è‚É£ Testando conex√£o Redis...');
    const stats = await getQueueStats();
    console.log(`   ‚úÖ Redis conectado - Stats: W:${stats.waiting} A:${stats.active} C:${stats.completed} F:${stats.failed}`);
    return true;
  } catch (error) {
    console.error('   ‚ùå Erro na conex√£o Redis:', error.message);
    return false;
  }
}

async function validateJobEnqueuing() {
  try {
    console.log('2Ô∏è‚É£ Testando enfileiramento de jobs...');
    
    const job = await audioQueue.add('analyze', {
      jobId: 'validation-test-' + Date.now(),
      fileKey: 'validation/test.wav',
      mode: 'genre',
      fileName: 'validation-test.wav'
    });
    
    console.log(`   ‚úÖ Job enfileirado com sucesso - ID: ${job.id}`);
    console.log(`   üìã Job data: ${JSON.stringify(job.data)}`);
    return job;
  } catch (error) {
    console.error('   ‚ùå Erro ao enfileirar job:', error.message);
    return null;
  }
}

async function monitorJobProcessing(jobId, duration = 15) {
  console.log(`3Ô∏è‚É£ Monitorando processamento por ${duration} segundos...`);
  
  for (let i = 0; i < duration; i++) {
    const stats = await getQueueStats();
    const status = `W:${stats.waiting} A:${stats.active} C:${stats.completed} F:${stats.failed}`;
    console.log(`   üìä ${i+1}s: ${status}`);
    
    if (stats.active > 0) {
      console.log('   ‚ö° JOB ATIVO DETECTADO - Worker est√° processando!');
    }
    
    if (stats.completed > 0) {
      console.log('   üéâ JOB COMPLETED DETECTADO - Processamento bem-sucedido!');
      return 'completed';
    }
    
    if (stats.failed > 0) {
      console.log('   ‚ö†Ô∏è JOB FAILED DETECTADO - Falha no processamento (esperado se arquivo n√£o existe)');
      return 'failed';
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('   ‚è∞ Timeout - Job n√£o foi processado');
  return 'timeout';
}

async function generateReport(redisOk, jobEnqueued, processingResult) {
  console.log('\nüìã RELAT√ìRIO FINAL DA VALIDA√á√ÉO');
  console.log('='.repeat(50));
  
  console.log(`üîó Conex√£o Redis: ${redisOk ? '‚úÖ FUNCIONAL' : '‚ùå FALHOU'}`);
  console.log(`üì• Enfileiramento: ${jobEnqueued ? '‚úÖ FUNCIONAL' : '‚ùå FALHOU'}`);
  
  let processingStatus = '‚ùå N√ÉO TESTADO';
  if (processingResult === 'completed') processingStatus = '‚úÖ SUCESSO COMPLETO';
  else if (processingResult === 'failed') processingStatus = '‚ö†Ô∏è FALHA ESPERADA (arquivo n√£o existe)';
  else if (processingResult === 'timeout') processingStatus = '‚è∞ TIMEOUT (worker n√£o ativo?)';
  
  console.log(`‚öôÔ∏è Processamento: ${processingStatus}`);
  
  console.log('\nüéØ DIAGN√ìSTICO:');
  
  if (redisOk && jobEnqueued) {
    if (processingResult === 'completed') {
      console.log('üéâ INTEGRA√á√ÉO 100% FUNCIONAL - Sistema pronto para produ√ß√£o!');
    } else if (processingResult === 'failed') {
      console.log('‚úÖ INTEGRA√á√ÉO FUNCIONAL - Falha esperada (teste com arquivo real)');
    } else {
      console.log('‚ö†Ô∏è INTEGRA√á√ÉO PARCIAL - Verificar se worker est√° rodando');
    }
  } else {
    console.log('‚ùå PROBLEMAS NA INTEGRA√á√ÉO - Verificar configura√ß√£o Redis');
  }
  
  console.log('\nüìù PR√ìXIMOS PASSOS:');
  console.log('1. Deploy Railway com worker corrigido');
  console.log('2. Testar com arquivo real existente no Backblaze');
  console.log('3. Monitorar logs em produ√ß√£o');
}

async function runValidation() {
  const redisOk = await validateRedisConnection();
  if (!redisOk) {
    await generateReport(false, false, null);
    return;
  }
  
  const job = await validateJobEnqueuing();
  if (!job) {
    await generateReport(true, false, null);
    return;
  }
  
  const processingResult = await monitorJobProcessing(job.id);
  await generateReport(true, true, processingResult);
}

runValidation().catch(console.error);