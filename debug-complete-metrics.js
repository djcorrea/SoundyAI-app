// üîç AN√ÅLISE DOS LOGS DE DEPLOY - M√©tricas Espectrais Calculadas
// Vamos mapear todas as m√©tricas que o pipeline est√° calculando

console.log('üîç AN√ÅLISE COMPLETA: M√©tricas calculadas no pipeline\n');

// Baseado nos logs, o pipeline est√° calculando:
const pipelineMetrics = {
  spectral: {
    centroid: {
      description: 'Centro de massa espectral (Hz)',
      samples: [685.28, 412.73, 456.60, 612.89, 681.20, 366.78, 666.23, 884.01, 960.44, 1017.75],
      logFormat: '[AUDIO] centroid_calculated stage=spectral',
      avgValue: null // ser√° calculado
    },
    rolloff: {
      description: 'Frequ√™ncia de rolloff espectral (Hz)',
      samples: [691.41, 574.22, 632.81, 585.94, 785.16, 433.59, 1277.34, 2191.41, 2460.94],
      logFormat: '[AUDIO] rolloff_calculated stage=spectral',
      avgValue: null
    },
    bandwidth: {
      description: 'Largura de banda espectral',
      calculated: true
    },
    spread: {
      description: 'Dispers√£o espectral',
      calculated: true
    },
    flatness: {
      description: 'Planeza espectral',
      calculated: true
    },
    crest: {
      description: 'Fator de cresta espectral',
      calculated: true
    },
    skewness: {
      description: 'Assimetria espectral',
      calculated: true
    },
    kurtosis: {
      description: 'Curtose espectral',
      calculated: true
    }
  },
  
  amplitude: {
    energy: {
      description: 'Energia por frame',
      samples: [10684.826062, 5362.074379, 3806.673391, 55395.333364, 12822.159999],
      logFormat: 'energy field in spectral logs'
    },
    meanMag2: {
      description: 'Magnitude m√©dia quadr√°tica',
      samples: [5.214654, 2.616923, 1.857820, 27.035302, 6.257765],
      logFormat: 'meanMag2 field in spectral logs'
    }
  },
  
  lufs: {
    integrated: 'LUFS integrado (-23 a 0)',
    shortTerm: 'LUFS short-term',
    momentary: 'LUFS momentary',
    lra: 'Loudness Range (LRA)'
  },
  
  truePeak: {
    maxDbtp: 'True Peak m√°ximo (dBTP)',
    maxLinear: 'True Peak linear',
    oversamplingFactor: 'Fator de oversampling',
    clippingCount: 'Contagem de clipping'
  },
  
  stereo: {
    correlation: 'Correla√ß√£o est√©reo',
    balance: 'Balan√ßo L/R',
    width: 'Largura est√©reo',
    isMonoCompatible: 'Compatibilidade mono',
    hasPhaseIssues: 'Problemas de fase'
  },
  
  bands: {
    sub: '20-60 Hz (Sub-bass)',
    low_bass: '60-250 Hz (Bass)',
    upper_bass: '250-500 Hz (Upper Bass)',
    low_mid: '500-1k Hz (Low Mid)',
    mid: '1k-2k Hz (Mid)',
    high_mid: '2k-4k Hz (High Mid)',
    brilho: '4k-8k Hz (Brilliance)',
    presenca: '8k-12k Hz (Presence)'
  },
  
  derived: {
    dynamicRange: 'Faixa din√¢mica (dB)',
    crestFactor: 'Fator de cresta',
    headroom: 'Headroom dispon√≠vel',
    rmsLevels: 'N√≠veis RMS por frame',
    clippingSamples: 'Amostras com clipping',
    dcOffset: 'Offset DC',
    thdPercent: 'Distor√ß√£o harm√¥nica total (%)'
  }
};

// Calcular valores m√©dios dos samples
pipelineMetrics.spectral.centroid.avgValue = 
  pipelineMetrics.spectral.centroid.samples.reduce((a,b) => a+b, 0) / 
  pipelineMetrics.spectral.centroid.samples.length;

pipelineMetrics.spectral.rolloff.avgValue = 
  pipelineMetrics.spectral.rolloff.samples.reduce((a,b) => a+b, 0) / 
  pipelineMetrics.spectral.rolloff.samples.length;

console.log('üìä M√âTRICAS ESPECTRAIS IDENTIFICADAS:');
console.log(`  Centroid m√©dio: ${pipelineMetrics.spectral.centroid.avgValue.toFixed(1)} Hz`);
console.log(`  Rolloff m√©dio: ${pipelineMetrics.spectral.rolloff.avgValue.toFixed(1)} Hz`);
console.log(`  Frames processados: ${pipelineMetrics.spectral.centroid.samples.length} samples`);

console.log('\nüéØ M√âTRICAS QUE DEVEM APARECER NA UI:');
console.log('‚úÖ J√° mapeadas:');
console.log('  - Score geral');
console.log('  - LUFS (integrated, short-term, momentary)');
console.log('  - True Peak (dBTP)');
console.log('  - Correla√ß√£o est√©reo');
console.log('  - LRA');

console.log('\n‚ùå FALTANDO na UI:');
console.log('  - Spectral Centroid (centro de massa espectral)');
console.log('  - Spectral Rolloff (frequ√™ncia de corte)');
console.log('  - Spectral Bandwidth, Spread, Flatness');
console.log('  - Energy e Mean Magnitude por frame');
console.log('  - Bandas de frequ√™ncia detalhadas (8 bandas)');
console.log('  - Crest Factor, Dynamic Range');
console.log('  - Clipping samples, DC Offset, THD');
console.log('  - Informa√ß√µes detalhadas de True Peak');

console.log('\nüîß FREQU√äNCIAS DETECTADAS NOS LOGS:');
console.log('  Range baixo: 340-500 Hz (fundamentais)');
console.log('  Range m√©dio: 500-1200 Hz (harm√¥nicos)');
console.log('  Range alto: 2000-9000 Hz (brilho/presen√ßa)');
console.log('  Picos especiais: 3449Hz, 5477Hz (overtones)');

console.log('\n‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:');
console.log('1. UI mostra apenas m√©tricas b√°sicas');
console.log('2. Tabela de frequ√™ncias com valores "exatos" (n√£o m√©dias)');
console.log('3. M√©tricas espectrais avan√ßadas n√£o mapeadas');
console.log('4. Bandas de frequ√™ncia n√£o detalhadas');
console.log('5. Informa√ß√µes de energia por frame ausentes');

console.log('\nüí° SOLU√á√ïES NECESS√ÅRIAS:');
console.log('1. Mapear todas as m√©tricas espectrais no normalizeBackendAnalysisData');
console.log('2. Criar campos na UI para m√©tricas avan√ßadas');
console.log('3. Corrigir tabela de frequ√™ncias com valores calculados');
console.log('4. Adicionar se√ß√£o de an√°lise espectral detalhada');
console.log('5. Mapear bandas de frequ√™ncia individuais');