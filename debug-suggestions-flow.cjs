#!/usr/bin/env node
/**
 * üîç DEBUG: Investigar fluxo de sugest√µes educativas
 * Rastrear por que sugest√µes n√£o est√£o aparecendo no modal
 */

const fs = require('fs');
const path = require('path');

// 1. Verificar se h√° an√°lises recentes com sugest√µes vazias
function checkRecentAnalyses() {
    console.log('üîç Verificando an√°lises recentes...\n');
    
    const workDir = 'c:\\Users\\DJ Correa\\Desktop\\Programa√ß√£o\\SoundyAI\\work';
    
    if (!fs.existsSync(workDir)) {
        console.log('‚ùå Diret√≥rio work n√£o encontrado');
        return;
    }
    
    const folders = fs.readdirSync(workDir, { withFileTypes: true })
        .filter(item => item.isDirectory())
        .map(item => ({
            name: item.name,
            path: path.join(workDir, item.name),
            modified: fs.statSync(path.join(workDir, item.name)).mtime
        }))
        .sort((a, b) => b.modified - a.modified)
        .slice(0, 5); // √öltimas 5 an√°lises
    
    console.log(`üìä √öltimas ${folders.length} an√°lises encontradas:\n`);
    
    folders.forEach((folder, index) => {
        console.log(`${index + 1}. ${folder.name} (${folder.modified.toISOString()})`);
        
        // Verificar se tem result.json
        const resultPath = path.join(folder.path, 'result.json');
        if (fs.existsSync(resultPath)) {
            try {
                const result = JSON.parse(fs.readFileSync(resultPath, 'utf8'));
                
                console.log(`   üìÑ result.json encontrado`);
                console.log(`   üéØ Suggestions: ${result.suggestions ? result.suggestions.length : 'undefined'}`);
                console.log(`   ‚ö†Ô∏è  Problems: ${result.problems ? result.problems.length : 'undefined'}`);
                
                if (result.suggestions && result.suggestions.length > 0) {
                    console.log('   üìã Primeiras sugest√µes:');
                    result.suggestions.slice(0, 2).forEach((sug, i) => {
                        console.log(`      ${i+1}. ${sug.message || sug.title || 'Sem t√≠tulo'} (${sug.severity?.level || 'sem severidade'})`);
                    });
                }
                
                if (result.problems && result.problems.length > 0) {
                    console.log('   üö® Problemas:');
                    result.problems.slice(0, 2).forEach((prob, i) => {
                        console.log(`      ${i+1}. ${prob.message || prob.title || 'Sem t√≠tulo'}`);
                    });
                }
                
                console.log('');
            } catch (err) {
                console.log(`   ‚ùå Erro ao ler result.json: ${err.message}\n`);
            }
        } else {
            console.log(`   ‚ùå result.json n√£o encontrado\n`);
        }
    });
}

// 2. Testar problemas-suggestions.js diretamente
async function testProblemsEngine() {
    console.log('üîß Testando engine de sugest√µes...\n');
    
    try {
        // Carregar m√≥dulo de sugest√µes
        const suggestionPath = 'c:\\Users\\DJ Correa\\Desktop\\Programa√ß√£o\\SoundyAI\\work\\lib\\audio\\features\\problems-suggestions.js';
        
        if (!fs.existsSync(suggestionPath)) {
            console.log('‚ùå problems-suggestions.js n√£o encontrado');
            return;
        }
        
        // Importar dinamicamente seria melhor, mas para debug vamos ler e simular
        const content = fs.readFileSync(suggestionPath, 'utf8');
        
        // Verificar se getNullResult est√° corrigido
        if (content.includes('return { suggestions: [], problems: [] }')) {
            console.log('‚ùå PROBLEMA: getNullResult ainda retorna arrays vazios!');
            console.log('   Sugest√µes educativas n√£o est√£o sendo aplicadas no backend\n');
        } else if (content.includes('suggestions: [') && content.includes('message:') && content.includes('educational')) {
            console.log('‚úÖ getNullResult parece corrigido com sugest√µes educativas');
        } else {
            console.log('‚ö†Ô∏è  getNullResult status incerto - precisa verificar manualmente\n');
        }
        
        // Verificar se SEVERITY_LEVELS tem estrutura educativa
        if (content.includes('educationalTone') && content.includes('emoji')) {
            console.log('‚úÖ SEVERITY_LEVELS com estrutura educativa encontrada');
        } else {
            console.log('‚ùå SEVERITY_LEVELS sem estrutura educativa');
        }
        
        console.log('');
        
    } catch (err) {
        console.log(`‚ùå Erro ao testar engine: ${err.message}\n`);
    }
}

// 3. Verificar core-metrics.js
function testCoreMetrics() {
    console.log('üîß Testando core-metrics.js...\n');
    
    try {
        const coreMetricsPath = 'c:\\Users\\DJ Correa\\Desktop\\Programa√ß√£o\\SoundyAI\\work\\api\\audio\\core-metrics.js';
        
        if (!fs.existsSync(coreMetricsPath)) {
            console.log('‚ùå core-metrics.js n√£o encontrado');
            return;
        }
        
        const content = fs.readFileSync(coreMetricsPath, 'utf8');
        
        // Verificar se fallback est√° corrigido
        if (content.includes('suggestions: []') && content.includes('problems: []')) {
            console.log('‚ùå PROBLEMA: core-metrics ainda usa fallback vazio!');
            console.log('   An√°lise vazia resulta em arrays vazios, n√£o educativos\n');
        } else if (content.includes('getNullResult()') || content.includes('educational')) {
            console.log('‚úÖ core-metrics parece usar fallback educativo');
        } else {
            console.log('‚ö†Ô∏è  core-metrics status incerto\n');
        }
        
    } catch (err) {
        console.log(`‚ùå Erro ao testar core-metrics: ${err.message}\n`);
    }
}

// 4. Verificar audio-analyzer-integration.js
function testFrontendIntegration() {
    console.log('üîß Testando integra√ß√£o frontend...\n');
    
    try {
        const integrationPath = 'c:\\Users\\DJ Correa\\Desktop\\Programa√ß√£o\\SoundyAI\\audio-analyzer-integration.js';
        
        if (!fs.existsSync(integrationPath)) {
            console.log('‚ùå audio-analyzer-integration.js n√£o encontrado');
            return;
        }
        
        const content = fs.readFileSync(integrationPath, 'utf8');
        
        // Verificar se diagCard verifica analysis.suggestions
        if (content.includes('analysis.suggestions.length > 0')) {
            console.log('‚úÖ diagCard verifica analysis.suggestions.length');
        } else {
            console.log('‚ùå diagCard n√£o verifica analysis.suggestions corretamente');
        }
        
        // Verificar se h√° logging de debug
        if (content.includes('console.log') && content.includes('suggestions')) {
            console.log('‚úÖ Logging de debug encontrado para sugest√µes');
        } else {
            console.log('‚ö†Ô∏è  Pouco logging de debug para sugest√µes');
        }
        
        // Verificar se renderSuggestionItem foi atualizado
        if (content.includes('renderSuggestionItem') && content.includes('educational')) {
            console.log('‚úÖ renderSuggestionItem com estrutura educativa');
        } else {
            console.log('‚ùå renderSuggestionItem sem estrutura educativa');
        }
        
        console.log('');
        
    } catch (err) {
        console.log(`‚ùå Erro ao testar frontend: ${err.message}\n`);
    }
}

// Executar diagn√≥stico completo
async function runFullDiagnostic() {
    console.log('üîç DIAGN√ìSTICO COMPLETO - Fluxo de Sugest√µes Educativas');
    console.log('='.repeat(60) + '\n');
    
    checkRecentAnalyses();
    await testProblemsEngine();
    testCoreMetrics();
    testFrontendIntegration();
    
    console.log('üìã RESUMO:');
    console.log('1. Se an√°lises recentes t√™m suggestions: [], o problema est√° no backend');
    console.log('2. Se getNullResult ainda retorna arrays vazios, backend n√£o foi corrigido');
    console.log('3. Se core-metrics usa fallback vazio, an√°lises vazias n√£o geram educativas');
    console.log('4. Se diagCard n√£o encontra suggestions, frontend n√£o renderiza\n');
    
    console.log('üí° PR√ìXIMOS PASSOS:');
    console.log('- Executar uma an√°lise de teste e verificar result.json');
    console.log('- Adicionar debug logging no diagCard para rastrear dados');
    console.log('- Verificar se analysis object tem suggestions no momento de renderiza√ß√£o');
}

runFullDiagnostic().catch(console.error);