// server.js
import express from "express";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import fetch from "node-fetch";

// üîë IMPORTANTE: Carregar .env ANTES de importar outros m√≥dulos
dotenv.config();

// Rotas principais
import analyzeRoute from "./api/audio/analyze.js";
import jobsRoute from "./api/jobs/[id].js"; // üëà rota de jobs conectada ao Postgres

console.log("üìÇ Arquivo .env carregado");
console.log("B2_KEY_ID:", process.env.B2_KEY_ID);
console.log("B2_APP_KEY:", process.env.B2_APP_KEY);
console.log("B2_BUCKET_NAME:", process.env.B2_BUCKET_NAME);
console.log("B2_ENDPOINT:", process.env.B2_ENDPOINT);
console.log("üóÑÔ∏è DATABASE_URL:", process.env.DATABASE_URL ? "‚úÖ Configurada" : "‚ùå N√£o configurada");

const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Middlewares
app.use(cors());
app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ extended: true, limit: "50mb" }));

// üëâ ROTA RAIZ PRIMEIRO: abre a landing
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "landing.html"));
});

// üëâ Aliases para o app (index)
app.get(["/index", "/index.html", "/app", "/home"], (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// üëâ Servir arquivos est√°ticos SEM index autom√°tico
app.use(
  express.static(path.join(__dirname, "public"), {
    index: false,
  })
);

// Rotas da API
import cancelSubscriptionRoute from "./api/cancel-subscription.js";
import chatWithImagesRoute from "./api/chat-with-images.js";
import chatRoute from "./api/chat.js";
import createPreferenceRoute from "./api/create-preference.js";
import deleteAccountRoute from "./api/delete-account.js";
import mercadopagoRoute from "./api/mercadopago.js";
import uploadAudioRoute from "./api/upload-audio.js";
import uploadImageRoute from "./api/upload-image.js";
import voiceMessageRoute from "./api/voice-message.js";
import webhookRoute from "./api/webhook.js";
import presignRoute from "./api/presign.js";

app.use("/api/cancel-subscription", cancelSubscriptionRoute);
app.use("/api/chat-with-images", chatWithImagesRoute);
app.use("/api/chat", chatRoute);
app.use("/api/create-preference", createPreferenceRoute);
app.use("/api/delete-account", deleteAccountRoute);
app.use("/api/mercadopago", mercadopagoRoute);
app.use("/api/upload-audio", uploadAudioRoute);
app.use("/api/upload", uploadImageRoute);
app.use("/api/voice", voiceMessageRoute);
app.use("/api/webhook", webhookRoute);
app.use("/api", presignRoute);

// Rotas de an√°lise
app.use("/api/audio", analyzeRoute);
app.use("/api/jobs", jobsRoute); // ‚úÖ rota de jobs conectada ao banco

// ---------- ROTA REVOLUCION√ÅRIA DE SUGEST√ïES IA ----------
app.post("/api/suggestions", async (req, res) => {
  try {
    const { suggestions, metrics, genre } = req.body;

    console.log(`üöÄ [AI-API] Recebidas ${suggestions?.length || 0} sugest√µes para processamento`);

    // Valida√ß√£o dos dados de entrada
    if (!suggestions || !Array.isArray(suggestions) || suggestions.length === 0) {
      console.error("‚ùå [AI-API] Lista de sugest√µes inv√°lida");
      return res.status(400).json({ 
        error: "Lista de sugest√µes √© obrigat√≥ria e n√£o pode estar vazia",
        received: suggestions
      });
    }

    // Se n√£o tiver API key, retornar erro (n√£o fallback)
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey || openaiApiKey === 'your_openai_api_key_here') {
      console.error("‚ö†Ô∏è [AI-API] OpenAI API Key n√£o configurada");
      return res.status(503).json({
        success: false,
        error: 'API Key da IA n√£o configurada',
        source: 'error',
        message: 'Configure OPENAI_API_KEY nas vari√°veis de ambiente'
      });
    }

    console.log(`üìã [AI-API] Construindo prompt para ${suggestions.length} sugest√µes do g√™nero: ${genre || 'geral'}`);

    // Construir prompt para TODAS as sugest√µes
    const prompt = buildSuggestionPrompt(suggestions, metrics, genre);

    console.log(`ü§ñ [AI-API] Enviando prompt para OpenAI...`);

    // Chamar OpenAI
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: process.env.AI_MODEL || 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `üéµ VOC√ä √â UM ASSISTENTE DE MIXAGEM E MASTERIZA√á√ÉO MUSICAL ULTRA-AVAN√áADO

üéØ SUA MISS√ÉO:
Analisar os PROBLEMAS de √°udio detectados e gerar sugest√µes EDUCATIVAS, claras e aplic√°veis para o usu√°rio.

üìã ESTRUTURA OBRIGAT√ìRIA para cada sugest√£o:

‚ö†Ô∏è Problema: [descri√ß√£o curta e clara]
üéØ Causa Prov√°vel: [explica√ß√£o t√©cnica simples, sem jarg√£o pesado]
üõ†Ô∏è Solu√ß√£o Pr√°tica: [passo a passo direto que pode ser feito em qualquer DAW]
üí° Dica Extra: [truque avan√ßado ou considera√ß√£o criativa]
üéπ Exemplo de Plugin/Ferramenta: [cite pelo menos 1 plugin popular ou gratuito que ajude]
‚úÖ Resultado Esperado: [explique de forma motivadora o que vai melhorar no som]

ÔøΩ REGRAS DE OURO:
- Escreva de forma educativa e motivadora, sem ser r√≠gido
- Use linguagem simples, mas com conte√∫do t√©cnico real
- Sempre que poss√≠vel, d√™ refer√™ncias a g√™neros musicais (Funk, Trap, Eletr√¥nico, etc.)
- Sa√≠da formatada em blocos claros com emojis para facilitar leitura
- Seja pr√°tico: usu√°rio deve conseguir aplicar HOJE no seu projeto

üöÄ RESPONDA SEMPRE EM JSON PURO, SEM EXPLICA√á√ïES EXTRAS.`
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        temperature: parseFloat(process.env.AI_TEMPERATURE || '0.3'),
        max_tokens: parseInt(process.env.AI_MAX_TOKENS || '2000'),
        top_p: 0.9,
        frequency_penalty: 0.1,
        presence_penalty: 0.1
      })
    });

    if (!openaiResponse.ok) {
      console.error("‚ùå Erro na API da OpenAI:", openaiResponse.status, openaiResponse.statusText);
      throw new Error(`OpenAI API retornou ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    const aiSuggestion = openaiData.choices[0]?.message?.content;

    if (!aiSuggestion) {
      throw new Error('Resposta vazia da IA');
    }

  // Processar resposta da IA e enriquecer sugest√µes (parser ultra blindado)
  const enhancedSuggestions = processAIResponse(suggestions, aiSuggestion);

    console.log(`‚úÖ [AI-API] Processamento conclu√≠do:`, {
      suggestionsOriginais: suggestions.length,
      suggestionsEnriquecidas: enhancedSuggestions.length,
      sucessoTotal: enhancedSuggestions.length === suggestions.length ? 'SIM' : 'PARCIAL'
    });

    res.json({
      success: true,
      enhancedSuggestions,
      source: 'ai',
      message: `${enhancedSuggestions.length} sugest√µes enriquecidas pela IA`,
      metadata: {
        originalCount: suggestions.length,
        enhancedCount: enhancedSuggestions.length,
        genre: genre || 'n√£o especificado',
        processingTime: Date.now(),
        aiSuccess: enhancedSuggestions.length,
        aiErrors: Math.max(0, suggestions.length - enhancedSuggestions.length)
      }
    });

  } catch (error) {
    console.error("‚ùå [AI-API] Erro cr√≠tico no processamento:", error.message);

    // Manter o sistema funcionando: retornar fallback estruturado (200 OK)
    const original = req.body?.suggestions || [];
    const fallbackEnhanced = original.map((s) => ({
      blocks: {
        problem: `‚ö†Ô∏è ${s.message || s.title || 'Problema detectado'}`,
        cause: 'üéØ An√°lise autom√°tica',
        solution: `üõ†Ô∏è ${s.action || s.description || 'Ajuste recomendado'}`,
        tip: 'üí° Monitore em diferentes sistemas',
        plugin: 'üéπ EQ/Compressor nativos',
        result: '‚úÖ Melhoria na inteligibilidade e equil√≠brio'
      },
      metadata: {
        priority: s.priority || 'm√©dia',
        difficulty: 'intermedi√°rio',
        confidence: s.confidence || 0.7,
        frequency_range: s.frequency_range || 'amplo espectro',
        processing_type: 'Ajuste geral'
      },
      aiEnhanced: false
    }));

    res.json({
      success: true,
      enhancedSuggestions: fallbackEnhanced,
      source: 'fallback',
      message: 'Usando sugest√µes estruturadas devido a erro da IA',
      metadata: {
        originalCount: original.length,
        enhancedCount: fallbackEnhanced.length,
        aiSuccess: 0,
        aiErrors: Math.max(0, original.length - fallbackEnhanced.length)
      }
    });
  }
});

// Fun√ß√£o para construir o prompt da IA
function buildSuggestionPrompt(suggestions, metrics, genre) {
  const suggestionsList = suggestions.map((s, i) => 
    `${i + 1}. ${s.message || s.title || 'Sugest√£o'} - ${s.action || s.description || 'Sem a√ß√£o definida'} (Prioridade: ${s.priority || 5}, Confian√ßa: ${s.confidence || 0.5})`
  ).join('\n');

  const metricsInfo = metrics ? `
üîä AN√ÅLISE ESPECTRAL DETALHADA:
- LUFS Integrado: ${metrics.lufsIntegrated || 'N/A'} dB (Loudness global)
- True Peak: ${metrics.truePeakDbtp || 'N/A'} dBTP (Picos digitais)  
- Dynamic Range: ${metrics.dynamicRange || 'N/A'} LU (Din√¢mica)
- Correla√ß√£o Est√©reo: ${metrics.stereoCorrelation || 'N/A'} (Espacializa√ß√£o)
- LRA (Range): ${metrics.lra || 'N/A'} LU (Varia√ß√£o din√¢mica)
` : '';

  const genreContext = getGenreContext(genre);

  return `
üéµ VOC√ä √â O MAIS AVAN√áADO ENGENHEIRO DE √ÅUDIO E MASTERING DO MUNDO

Analise estas detec√ß√µes autom√°ticas para ${genre || 'm√∫sica geral'} e transforme cada uma numa sugest√£o REVOLUCION√ÅRIA:

${suggestionsList}

${metricsInfo}

${genreContext}

üìã RETORNE JSON PURO com este formato EXATO:
{
  "suggestions": [
    {
      "blocks": {
        "problem": "‚ö†Ô∏è [descri√ß√£o curta e clara do problema]",
        "cause": "üéØ [explica√ß√£o t√©cnica simples, sem jarg√£o pesado]", 
        "solution": "üõ†Ô∏è [passo a passo direto que pode ser feito em qualquer DAW]",
        "tip": "üí° [truque avan√ßado ou considera√ß√£o criativa]",
        "plugin": "üéπ [cite pelo menos 1 plugin popular ou gratuito que ajude]",
        "result": "‚úÖ [explique de forma motivadora o que vai melhorar no som]"
      },
      "metadata": {
        "priority": "alta|m√©dia|baixa",
        "difficulty": "iniciante|intermedi√°rio|avan√ßado",
        "confidence": 0.95,
        "frequency_range": "20-60Hz",
        "processing_type": "EQ|Compressor|Limiter|Spatial",
        "genre_specific": "Se aplic√°vel ao g√™nero analisado"
      },
      "aiEnhanced": true
    }
  ]
}`;
}

// Fun√ß√£o para obter contexto do g√™nero
function getGenreContext(genre) {
  const contexts = {
    funk_mandela: `
üéµ CONTEXTO FUNK MANDELA:
- Foco em sub bass (40-80Hz) com presen√ßa forte
- Mid bass (80-200Hz) deve ter punch sem masking
- Vocal range (1-4kHz) cristalino para inteligibilidade
- High-end (8-15kHz) controlado mas presente
- Din√¢mica: moderada (DR 4-6) para energia constante
- True Peak: m√°ximo -1dBTP para sistemas potentes
- LUFS target: -8 a -12 LUFS para som competitivo`,
    
    trance: `
üéµ CONTEXTO TRANCE:
- Sub bass limpo (30-60Hz) sem distor√ß√£o
- Kick punch (60-120Hz) definido e controlado  
- Lead synths (2-8kHz) brilhantes e espaciais
- Reverb/delay equilibrados para profundidade
- Din√¢mica: baixa (DR 3-5) para energia sustentada
- True Peak: -0.5dBTP para maximizar loudness
- LUFS target: -6 a -9 LUFS para dancefloor impact`,
    
    bruxaria: `
üéµ CONTEXTO BRUXARIA/EXPERIMENTAL:
- Frequ√™ncias graves (20-100Hz) podem ser n√£o-convencionais
- Mid range (200Hz-2kHz) com espa√ßo para atmosferas
- High-end (5-20kHz) pode ter texturas √∫nicas
- Din√¢mica: vari√°vel (DR 6-12) para expressividade
- True Peak: flex√≠vel (-3 a -1dBTP) conforme est√©tica
- LUFS target: -12 a -16 LUFS para preservar din√¢mica`
  };
  
  return contexts[genre] || `
üéµ CONTEXTO GERAL:
- Analise caracter√≠sticas espec√≠ficas do g√™nero
- Balance entre clareza e energia
- Respeite a din√¢mica natural do estilo
- Foque na inteligibilidade e impacto emocional`;
}

// Fun√ß√£o para processar resposta da IA
function processAIResponse(originalSuggestions, aiResponse) {
  console.log('ü§ñ [AI-PROCESSING] Processando resposta da IA...');

  // Pequena fun√ß√£o utilit√°ria para normalizar um item vindo da IA
  function normalizeAISuggestion(aiItem, original) {
    if (!aiItem || typeof aiItem !== 'object') {
      return {
        blocks: {
          problem: `‚ö†Ô∏è ${original.message || original.title || 'Problema detectado'}`,
          cause: 'üéØ An√°lise autom√°tica',
          solution: `üõ†Ô∏è ${original.action || original.description || 'Ajuste recomendado'}`,
          tip: 'üí° Monitore em diferentes sistemas',
          plugin: 'üéπ EQ/Compressor nativos',
          result: '‚úÖ Melhoria esperada na clareza e impacto'
        },
        metadata: {
          priority: original.priority || 'm√©dia',
          difficulty: 'intermedi√°rio',
          confidence: original.confidence || 0.7,
          frequency_range: original.frequency_range || 'amplo espectro',
          processing_type: 'Ajuste geral'
        },
        aiEnhanced: false
      };
    }

    // Se vier no formato "flat" (problem/solution), converte para blocks
    const blocks = aiItem.blocks || {
      problem: aiItem.problem || `‚ö†Ô∏è ${original.message || original.title || 'Problema detectado'}`,
      cause: aiItem.cause || 'üéØ Causa t√©cnica em an√°lise',
      solution: aiItem.solution || `üõ†Ô∏è ${original.action || original.description || 'Solu√ß√£o recomendada'}`,
      tip: aiItem.tip || 'üí° Verifique com refer√™ncia e mono-compatibilidade',
      plugin: aiItem.plugin || 'üéπ EQ/Compressor',
      result: aiItem.result || '‚úÖ Melhoria na qualidade sonora geral'
    };

    const metadata = aiItem.metadata || {
      priority: aiItem.priority || original.priority || 'm√©dia',
      difficulty: aiItem.difficulty || 'intermedi√°rio',
      confidence: aiItem.confidence || original.confidence || 0.8,
      frequency_range: aiItem.frequency_range || original.frequency_range || 'banda_ampla',
      processing_type: aiItem.processing_type || 'eq'
    };

    return {
      blocks,
      metadata,
      aiEnhanced: aiItem.aiEnhanced !== undefined ? aiItem.aiEnhanced : true
    };
  }

  try {
    const parsedArray = safeParseAIResponse(aiResponse, originalSuggestions);

    // Se o safe parser devolveu as sugest√µes originais (fallback), normaliza todas
    const usingFallback = parsedArray === originalSuggestions;

    let normalized = [];
    if (usingFallback) {
      console.log(`ÔøΩÔ∏è [AI-PROCESSING] Fallback usado, preservando ${originalSuggestions.length} sugest√µes`);
      normalized = originalSuggestions.map((orig) => normalizeAISuggestion(null, orig));
    } else {
      // parsedArray pode ser o pr√≥prio array de sugest√µes da IA OU um objeto com .suggestions
      const aiArray = Array.isArray(parsedArray)
        ? parsedArray
        : (parsedArray && Array.isArray(parsedArray.suggestions) ? parsedArray.suggestions : []);

      // Normalizar cada item, alinhando por √≠ndice com as originais
      normalized = originalSuggestions.map((orig, idx) => normalizeAISuggestion(aiArray[idx], orig));
    }

    console.log(`‚úÖ [AI-PROCESSING] Parse bem-sucedido: ${normalized.length} sugest√µes`);
    return normalized;
  } catch (err) {
    console.error('‚ùå [AI-PROCESSING] Erro cr√≠tico no processamento:', err.message);
    console.log(`ÔøΩÔ∏è [AI-PROCESSING] Fallback usado, preservando ${originalSuggestions.length} sugest√µes`);
    return originalSuggestions.map((orig) => normalizeAISuggestion(null, orig));
  }
}

// Parser ultra blindado para resposta da IA
function safeParseAIResponse(raw, fallbackArray) {
  try {
    const rawStr = typeof raw === 'string' ? raw : String(raw ?? '');
    console.log(`[AI-PROCESSING] Resposta recebida: ${rawStr.length} chars`);

    // 1) Sanitiza√ß√£o b√°sica
    let cleaned = rawStr
      // remover cercas de c√≥digo markdown
      .replace(/```json\s*|```/g, '')
      // normalizar quebras de linha
      .replace(/\r\n|\r/g, '\n')
      // remover caracteres de controle inv√°lidos
      .replace(/[^\x09\x0A\x0D\x20-\x7E\u00A0-\uFFFF]/g, '')
      .trim();

    // remover v√≠rgulas soltas antes de ] ou }
    cleaned = cleaned.replace(/,\s*([\]}])/g, '$1');

    // 2) Tentar JSON.parse direto
    try {
      const direct = JSON.parse(cleaned);
      const arr = Array.isArray(direct) ? direct : (direct && direct.suggestions);
      if (Array.isArray(arr)) return direct; // mant√©m estrutura original (array puro ou objeto com suggestions)
    } catch (_) {
      // segue para estrat√©gia de extra√ß√£o
    }

    // 3) Extra√ß√£o do array [...] v√°lido via regex/recorte
    console.log('[AI-PROCESSING] Parse falhou, corre√ß√£o aplicada');
    const firstIdx = cleaned.indexOf('[');
    const lastIdx = cleaned.lastIndexOf(']');
    if (firstIdx !== -1 && lastIdx !== -1 && lastIdx > firstIdx) {
      let arrayText = cleaned.slice(firstIdx, lastIdx + 1);
      // limpar v√≠rgulas finais novamente
      arrayText = arrayText.replace(/,\s*]/g, ']');
      arrayText = arrayText.replace(/,\s*}/g, '}');
      try {
        const arr = JSON.parse(arrayText);
        if (Array.isArray(arr)) return arr; // retorna array puro
      } catch (_) {
        // ainda n√£o deu
      }
    }

    // 4) Falhou: retornar fallback
    console.warn('[AI-PROCESSING] Parse falhou, usando fallback');
    return fallbackArray; // devolve exatamente o fallback recebido
  } catch (e) {
    console.error('[AI-PROCESSING] Erro inesperado no safeParse:', e.message);
    return fallbackArray;
  }
}

// üëâ Fallback SPA: qualquer rota n√£o-API cai no app (index.html)
app.get("*", (req, res, next) => {
  if (req.path.startsWith("/api/")) return next();
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// Start
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`üöÄ Servidor SoundyAI rodando na porta ${PORT}`);
});

export default app;
