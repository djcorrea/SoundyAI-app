// test-integracao-bullmq.js
// üî• AUDITORIA COMPLETA DA INTEGRA√á√ÉO BULLMQ API ‚Üî WORKER

import { audioQueue } from './work/queue/redis.js';
import 'dotenv/config';

console.log('üß™ [AUDIT] INICIANDO AUDITORIA COMPLETA DA INTEGRA√á√ÉO BULLMQ/REDIS');
console.log('=' .repeat(80));

// üîç STEP 1: Verificar configura√ß√£o Redis
console.log('üîç STEP 1: VERIFICANDO CONFIGURA√á√ÉO REDIS');
console.log('Redis Queue Name:', audioQueue.name);
console.log('Redis Connection:', audioQueue.opts.connection.options);

// üîç STEP 2: Teste de conex√£o
async function testRedisConnection() {
  try {
    console.log('üîó [AUDIT] Testando conex√£o Redis...');
    // Testar conex√£o com o Redis usando getWaitingCount (m√©todo simples)
    await audioQueue.getWaitingCount();
    console.log('‚úÖ [AUDIT] Redis conectado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå [AUDIT] Erro na conex√£o Redis:', error.message);
    return false;
  }
}

// üîç STEP 3: Verificar stats da fila
async function checkQueueStats() {
  try {
    console.log('üìä [AUDIT] Verificando stats da fila...');
    
    const [waiting, active, completed, failed] = await Promise.all([
      audioQueue.getWaitingCount(),
      audioQueue.getActiveCount(), 
      audioQueue.getCompletedCount(),
      audioQueue.getFailedCount()
    ]);

    console.log(`üìà [AUDIT] FILA STATS:`);
    console.log(`   - Aguardando: ${waiting}`);
    console.log(`   - Ativas: ${active}`);
    console.log(`   - Completas: ${completed}`);
    console.log(`   - Falhadas: ${failed}`);
    console.log(`   - Total: ${waiting + active + completed + failed}`);

    return { waiting, active, completed, failed };
  } catch (error) {
    console.error('‚ùå [AUDIT] Erro ao obter stats:', error.message);
    return null;
  }
}

// üîç STEP 4: Teste de enfileiramento
async function testJobEnqueue() {
  try {
    console.log('üì• [AUDIT] Testando enfileiramento de job...');
    
    const testJobData = {
      jobId: 'audit-test-' + Date.now(),
      fileKey: 'test-files/audit-sample.wav',
      mode: 'genre',
      fileName: 'audit-sample.wav'
    };

    console.log('üìã [AUDIT] Dados do job teste:', testJobData);
    
    // Adicionar job na fila
    const job = await audioQueue.add('analyze', testJobData, {
      attempts: 1, // Apenas 1 tentativa para teste
      removeOnComplete: 1,
      removeOnFail: 1
    });

    console.log('‚úÖ [AUDIT] Job enfileirado com sucesso!');
    console.log(`   - Job ID: ${job.id}`);
    console.log(`   - Job Name: ${job.name}`);
    console.log(`   - JobID Interno: ${job.data.jobId}`);

    return job;
  } catch (error) {
    console.error('‚ùå [AUDIT] Erro ao enfileirar job:', error.message);
    return null;
  }
}

// üîç STEP 5: Monitorar processamento por 30 segundos
async function monitorProcessing(testJob) {
  if (!testJob) {
    console.log('‚ö†Ô∏è [AUDIT] N√£o h√° job para monitorar');
    return;
  }

  console.log('üëÄ [AUDIT] Monitorando processamento por 30 segundos...');
  
  let monitoring = true;
  let foundActive = false;
  let foundCompleted = false;
  let foundFailed = false;

  // Event listeners para debug
  audioQueue.on('waiting', (job) => {
    if (job.id === testJob.id) {
      console.log(`‚åõ [AUDIT] JOB WAITING: ${job.id} | ${job.data.jobId}`);
    }
  });

  audioQueue.on('active', (job) => {
    if (job.id === testJob.id) {
      console.log(`‚ö° [AUDIT] JOB ATIVO: ${job.id} | ${job.data.jobId}`);
      foundActive = true;
    }
  });

  audioQueue.on('completed', (job, result) => {
    if (job.id === testJob.id) {
      console.log(`‚úÖ [AUDIT] JOB COMPLETO: ${job.id} | ${job.data.jobId}`);
      foundCompleted = true;
      monitoring = false;
    }
  });

  audioQueue.on('failed', (job, err) => {
    if (job.id === testJob.id) {
      console.log(`‚ùå [AUDIT] JOB FALHOU: ${job.id} | ${job.data.jobId} | Erro: ${err.message}`);
      foundFailed = true;
      monitoring = false;
    }
  });

  // Monitorar por 30 segundos
  const startTime = Date.now();
  while (monitoring && (Date.now() - startTime) < 30000) {
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Verificar stats a cada 2 segundos
    const stats = await checkQueueStats();
    if (stats && stats.active > 0) {
      console.log(`üîÑ [AUDIT] Worker processando... (${stats.active} ativas)`);
    }
  }

  // Timeout
  if (monitoring) {
    console.log('‚è∞ [AUDIT] Timeout de 30 segundos atingido');
    monitoring = false;
  }

  return {
    foundActive,
    foundCompleted, 
    foundFailed
  };
}

// üîç STEP 6: Diagn√≥stico final
function generateDiagnosis(redisOk, stats, jobEnqueued, monitorResults) {
  console.log('\nüèÅ [AUDIT] DIAGN√ìSTICO FINAL');
  console.log('=' .repeat(50));

  // Redis Connection
  if (redisOk) {
    console.log('‚úÖ Conex√£o Redis: FUNCIONAL');
  } else {
    console.log('‚ùå Conex√£o Redis: FALHA');
    return 'REDIS_CONNECTION_FAILED';
  }

  // Job Enqueuing
  if (jobEnqueued) {
    console.log('‚úÖ Enfileiramento: FUNCIONAL');
  } else {
    console.log('‚ùå Enfileiramento: FALHA');
    return 'ENQUEUE_FAILED';
  }

  // Worker Processing
  if (monitorResults.foundActive) {
    console.log('‚úÖ Worker Pickup: FUNCIONAL');
  } else {
    console.log('‚ùå Worker Pickup: FALHA');
    return 'WORKER_NOT_PICKING_UP';
  }

  if (monitorResults.foundCompleted) {
    console.log('‚úÖ Processamento Completo: FUNCIONAL');
    return 'INTEGRATION_FULLY_FUNCTIONAL';
  } else if (monitorResults.foundFailed) {
    console.log('‚ö†Ô∏è Processamento: FALHA ESPERADA (arquivo teste)');
    return 'INTEGRATION_FUNCTIONAL_TEST_FILE_MISSING';
  } else {
    console.log('‚ö†Ô∏è Processamento: EM ANDAMENTO/TIMEOUT');
    return 'PROCESSING_TIMEOUT_OR_IN_PROGRESS';
  }
}

// üöÄ EXECUTAR AUDITORIA COMPLETA
async function runCompleteAudit() {
  try {
    console.log('üöÄ [AUDIT] EXECUTANDO AUDITORIA COMPLETA...\n');

    // Step 1: Conex√£o Redis
    const redisOk = await testRedisConnection();
    if (!redisOk) {
      console.log('üö® [AUDIT] CR√çTICO: Redis n√£o conectado - encerrando auditoria');
      process.exit(1);
    }

    // Step 2: Stats iniciais
    console.log('\nüìä [AUDIT] Stats iniciais da fila:');
    const initialStats = await checkQueueStats();

    // Step 3: Enfileirar job teste
    console.log('\nüì• [AUDIT] Testando enfileiramento:');
    const testJob = await testJobEnqueue();

    // Step 4: Stats ap√≥s enfileiramento
    console.log('\nüìä [AUDIT] Stats ap√≥s enfileiramento:');
    await checkQueueStats();

    // Step 5: Monitorar processamento
    console.log('\nüëÄ [AUDIT] Monitorando processamento:');
    const monitorResults = await monitorProcessing(testJob);

    // Step 6: Diagn√≥stico final
    const diagnosis = generateDiagnosis(redisOk, initialStats, !!testJob, monitorResults);
    
    console.log('\nüéØ [AUDIT] RESULTADO:', diagnosis);
    
    // Limpar eventos
    audioQueue.removeAllListeners();
    
    console.log('\n‚úÖ [AUDIT] Auditoria completa finalizada');
    process.exit(0);

  } catch (error) {
    console.error('\nüö® [AUDIT] ERRO CR√çTICO na auditoria:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

// Executar
runCompleteAudit();