// üéØ TESTE SIMPLIFICADO DE TOLER√ÇNCIAS DE DIN√ÇMICA
// Valida configura√ß√µes b√°sicas do sistema por g√™nero

async function testBasicThresholds() {
  console.log('üéØ === TESTE B√ÅSICO DE CONFIGURA√á√ïES ===\n');
  
  // Import din√¢mico para evitar problemas
  try {
    const module = await import('../work/lib/audio/features/problems-suggestions-v2.js');
    const { ProblemsAndSuggestionsAnalyzerV2 } = module;
    
    // Testar cada g√™nero
    const genres = ['funk_mandela', 'funk_automotivo', 'eletronico', 'trance'];
    
    for (const genre of genres) {
      console.log(`üéµ Testando: ${genre}`);
      
      const analyzer = new ProblemsAndSuggestionsAnalyzerV2(genre);
      const drThreshold = analyzer.thresholds.dr;
      
      console.log(`   Target: ${drThreshold.target} LU`);
      console.log(`   Tolerance: ${drThreshold.tolerance} LU`);
      console.log(`   Limite aceit√°vel: ${drThreshold.target + drThreshold.tolerance} LU`);
      
      // Teste b√°sico com valor ideal
      const mockMetrics = {
        dynamics: { dynamicRange: drThreshold.target }
      };
      
      const result = analyzer.analyzeWithEducationalSuggestions(mockMetrics);
      const drSuggestion = result.suggestions.find(s => s.metric === 'dynamicRange');
      
      if (drSuggestion) {
        console.log(`   ‚úÖ Resultado para target: ${drSuggestion.severity} - ${drSuggestion.message}`);
      } else {
        console.log(`   ‚ùå Nenhuma sugest√£o gerada`);
      }
      
      console.log('');
    }
    
    console.log('‚úÖ Teste b√°sico conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    console.error('Stack:', error.stack);
  }
}

testBasicThresholds();