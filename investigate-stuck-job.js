/**
 * üö® INVESTIGA√á√ÉO DO JOB TRAVADO
 * 
 * Job ID: 8e6284d7-99bb-4ce3-a758-5de4c1182b63
 * Status: processing h√° 12+ minutos
 */

import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const pool = new Pool({
    connectionString: process.env.DATABASE_URL
});

const STUCK_JOB_ID = '8e6284d7-99bb-4ce3-a758-5de4c1182b63';

async function investigateStuckJob() {
    try {
        console.log(`üö® INVESTIGA√á√ÉO PROFUNDA DO JOB TRAVADO: ${STUCK_JOB_ID}`);
        console.log('=' .repeat(80));
        
        // üìä Dados completos do job
        const jobData = await pool.query(`
            SELECT * FROM jobs WHERE id = $1
        `, [STUCK_JOB_ID]);
        
        if (jobData.rows.length === 0) {
            console.log('‚ùå Job n√£o encontrado!');
            return;
        }
        
        const job = jobData.rows[0];
        
        console.log('\nüìã DADOS COMPLETOS DO JOB:');
        console.log('‚îú‚îÄ ID:', job.id);
        console.log('‚îú‚îÄ File Key:', job.file_key);
        console.log('‚îú‚îÄ Mode:', job.mode);
        console.log('‚îú‚îÄ Status:', job.status);
        console.log('‚îú‚îÄ Created:', job.created_at);
        console.log('‚îú‚îÄ Updated:', job.updated_at);
        console.log('‚îú‚îÄ Completed:', job.completed_at || 'NULL');
        console.log('‚îú‚îÄ Error:', job.error || 'NULL');
        console.log('‚îú‚îÄ Has Result:', job.result ? 'SIM' : 'N√ÉO');
        
        const minutesStuck = (Date.now() - new Date(job.updated_at).getTime()) / 60000;
        console.log('‚îî‚îÄ Tempo Travado:', Math.floor(minutesStuck), 'minutos');
        
        // üîç Teste direto da API
        console.log('\nüåê TESTE DA API PARA ESTE JOB:');
        try {
            const response = await fetch(`http://localhost:3001/api/jobs/${STUCK_JOB_ID}`);
            const apiData = await response.json();
            
            console.log('‚îú‚îÄ API Response Status:', response.status);
            console.log('‚îú‚îÄ API Job Status:', apiData.status);
            console.log('‚îú‚îÄ API Error:', apiData.error || 'NULL');
            console.log('‚îú‚îÄ API Has Result:', apiData.result ? 'SIM' : 'N√ÉO');
            console.log('‚îî‚îÄ API Raw Response:', JSON.stringify(apiData, null, 2));
            
        } catch (apiError) {
            console.log('‚ùå Erro ao testar API:', apiError.message);
        }
        
        // üîß SIMULA√á√ÉO DO WORKER - O que aconteceria se process√°ssemos agora?
        console.log('\nüîß SIMULA√á√ÉO: O que aconteceria se reprocess√°ssemos este job?');
        
        // Verificar se o arquivo ainda existe no B2
        const fileKey = job.file_key;
        console.log('‚îú‚îÄ File Key a ser processado:', fileKey);
        
        // Verificar se o job tem todas as info necess√°rias
        const hasRequiredData = fileKey && job.mode;
        console.log('‚îú‚îÄ Tem dados necess√°rios:', hasRequiredData ? 'SIM' : 'N√ÉO');
        console.log('‚îî‚îÄ Pronto para reprocessamento:', hasRequiredData ? 'SIM' : 'N√ÉO');
        
        // üí° PROPOSTA DE CORRE√á√ÉO
        console.log('\nüí° PROPOSTAS DE CORRE√á√ÉO:');
        console.log('1Ô∏è‚É£ Reprocessar o job (for√ßar worker a pegar novamente)');
        console.log('2Ô∏è‚É£ Marcar como failed e permitir retry');
        console.log('3Ô∏è‚É£ Investigar logs do worker durante o processamento');
        console.log('4Ô∏è‚É£ Verificar se arquivo ainda existe no B2');
        
        await pool.end();
        
    } catch (error) {
        console.error('‚ùå Erro na investiga√ß√£o:', error.message);
        await pool.end();
    }
}

investigateStuckJob();