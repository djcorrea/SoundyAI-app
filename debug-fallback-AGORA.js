// debug-fallback-AGORA.js - DESCOBRIR ONDE CARALHO EST√Å FALHANDO
import "dotenv/config";
import pkg from "pg";

const { Client } = pkg;
const client = new Client({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.PGSSL === "disable" ? false : { rejectUnauthorized: false },
});
await client.connect();

console.log("üî• DEBUGANDO FALLBACK - VAMOS RESOLVER ESSA MERDA AGORA!");

// Pegar job mais recente que deveria ter an√°lise real
const jobQuery = await client.query(`
  SELECT id, file_key, status, result, error, created_at 
  FROM jobs 
  WHERE created_at > NOW() - INTERVAL '24 hours'
  ORDER BY created_at DESC 
  LIMIT 5
`);

console.log(`\nüìä JOBS RECENTES (√∫ltimas 24h):`);
for (const job of jobQuery.rows) {
  console.log(`\nüéµ JOB: ${job.id.substring(0,8)}`);
  console.log(`   üìÅ File: ${job.file_key}`);
  console.log(`   üìä Status: ${job.status}`);
  console.log(`   üìÖ Created: ${job.created_at}`);
  
  if (job.result) {
    const result = typeof job.result === 'string' ? JSON.parse(job.result) : job.result;
    console.log(`   üéØ Score: ${result.score || 'N/A'}`);
    console.log(`   üìà Scoring Method: ${result.scoringMethod || 'N/A'}`);
    console.log(`   üîß Engine: ${result.metadata?.engineVersion || 'N/A'}`);
    console.log(`   üìä Pipeline Phase: ${result.metadata?.pipelinePhase || 'N/A'}`);
    
    // VERIFICAR SE TEM DADOS REAIS
    if (result.technicalData) {
      const hasLUFS = result.technicalData.lufs !== undefined;
      const hasTruePeak = result.technicalData.truePeak !== undefined;
      const hasSpectral = result.technicalData.spectralBalance !== undefined;
      
      console.log(`   üéöÔ∏è LUFS Real: ${hasLUFS ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      console.log(`   üìä True Peak: ${hasTruePeak ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      console.log(`   üåà Spectral: ${hasSpectral ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
      
      if (hasLUFS) {
        console.log(`      üéöÔ∏è LUFS Value: ${result.technicalData.lufs}`);
      }
      if (hasTruePeak) {
        console.log(`      üìä True Peak: ${result.technicalData.truePeak}`);
      }
    }
    
    if (result._worker) {
      console.log(`   ü§ñ Worker Source: ${result._worker.source}`);
      console.log(`   ‚ö†Ô∏è Worker Error: ${result._worker.error || 'N/A'}`);
    }
    
    if (result.warnings && result.warnings.length > 0) {
      console.log(`   ‚ö†Ô∏è Warnings: ${result.warnings.join(', ')}`);
    }
  }
  
  if (job.error) {
    console.log(`   ‚ùå Error: ${job.error}`);
  }
}

// VERIFICAR WORKER STATUS NO RAILWAY
console.log(`\nüöÄ VERIFICANDO SE WORKER EST√Å VIVO...`);

// Verificar jobs em processing h√° muito tempo
const stuckJobs = await client.query(`
  SELECT id, file_key, status, updated_at, 
         EXTRACT(EPOCH FROM (NOW() - updated_at))/60 as minutes_stuck
  FROM jobs 
  WHERE status = 'processing' 
  AND updated_at < NOW() - INTERVAL '5 minutes'
  ORDER BY updated_at ASC
`);

if (stuckJobs.rows.length > 0) {
  console.log(`\nüö® JOBS TRAVADOS EM PROCESSING:`);
  for (const job of stuckJobs.rows) {
    console.log(`   üíÄ ${job.id.substring(0,8)} - ${Math.floor(job.minutes_stuck)} min travado`);
  }
} else {
  console.log(`\n‚úÖ Nenhum job travado em processing`);
}

// Verificar √∫ltimos jobs que falharam
const failedJobs = await client.query(`
  SELECT id, file_key, error, updated_at
  FROM jobs 
  WHERE status = 'failed'
  AND updated_at > NOW() - INTERVAL '2 hours'
  ORDER BY updated_at DESC
  LIMIT 3
`);

if (failedJobs.rows.length > 0) {
  console.log(`\nüíÄ JOBS QUE FALHARAM (√∫ltimas 2h):`);
  for (const job of failedJobs.rows) {
    console.log(`   ‚ùå ${job.id.substring(0,8)}: ${job.error}`);
  }
}

await client.end();
console.log(`\nüéØ AN√ÅLISE COMPLETA - VAMOS CORRIGIR ESSA MERDA!`);