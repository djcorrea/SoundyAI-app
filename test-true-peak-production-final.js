#!/usr/bin/env node

// üî• TESTE FINAL - TRUE PEAK FFmpeg PRODU√á√ÉO
// Verifica se a migra√ß√£o foi 100% conclu√≠da

import { processAudioComplete } from "./api/audio/pipeline-complete.js";
import fs from 'fs';
import path from 'path';

console.log('üî• TESTE FINAL - TRUE PEAK FFmpeg PRODU√á√ÉO');
console.log('=========================================\n');

async function testProductionPipeline() {
  try {
    console.log('üéµ Carregando arquivo de teste...');
    
    // Usar um arquivo pequeno do projeto
    const testFiles = [
      './test-debug-complete.wav', 
      './test-converted.wav',
      './test-audio-debug.wav'
    ];
    
    let testFile = null;
    for (const file of testFiles) {
      if (fs.existsSync(file)) {
        testFile = file;
        break;
      }
    }
    
    if (!testFile) {
      console.log('‚ùå Nenhum arquivo de teste encontrado. Criando um WAV m√≠nimo...');
      
      // Criar um WAV m√≠nimo para teste (1 segundo, 48kHz, mono)
      const sampleRate = 48000;
      const duration = 1; // 1 segundo
      const samples = sampleRate * duration;
      
      // Header WAV b√°sico
      const buffer = Buffer.alloc(44 + samples * 2);
      let offset = 0;
      
      // RIFF header
      buffer.write('RIFF', offset); offset += 4;
      buffer.writeUInt32LE(buffer.length - 8, offset); offset += 4;
      buffer.write('WAVE', offset); offset += 4;
      
      // fmt chunk
      buffer.write('fmt ', offset); offset += 4;
      buffer.writeUInt32LE(16, offset); offset += 4; // chunk size
      buffer.writeUInt16LE(1, offset); offset += 2;  // PCM
      buffer.writeUInt16LE(1, offset); offset += 2;  // mono
      buffer.writeUInt32LE(sampleRate, offset); offset += 4;
      buffer.writeUInt32LE(sampleRate * 2, offset); offset += 4; // byte rate
      buffer.writeUInt16LE(2, offset); offset += 2;  // block align
      buffer.writeUInt16LE(16, offset); offset += 2; // bits per sample
      
      // data chunk
      buffer.write('data', offset); offset += 4;
      buffer.writeUInt32LE(samples * 2, offset); offset += 4;
      
      // Audio data (sine wave 1kHz)
      for (let i = 0; i < samples; i++) {
        const sample = Math.sin(2 * Math.PI * 1000 * i / sampleRate) * 0.5;
        const value = Math.round(sample * 32767);
        buffer.writeInt16LE(value, offset);
        offset += 2;
      }
      
      testFile = './test-truepeak-production.wav';
      fs.writeFileSync(testFile, buffer);
      console.log(`‚úÖ Arquivo de teste criado: ${testFile}`);
    }
    
    console.log(`üìÅ Usando arquivo: ${testFile}`);
    const audioBuffer = fs.readFileSync(testFile);
    console.log(`üìä Tamanho do arquivo: ${audioBuffer.length} bytes`);
    
    console.log('\nüöÄ Executando pipeline de produ√ß√£o...');
    const startTime = Date.now();
    
    const result = await processAudioComplete(audioBuffer, path.basename(testFile), {
      jobId: 'test_production_' + Date.now()
    });
    
    const duration = Date.now() - startTime;
    console.log(`‚è±Ô∏è Pipeline executado em ${duration}ms`);
    
    console.log('\nüìä RESULTADOS:');
    console.log('==============');
    
    if (result.status === 'error') {
      console.log('‚ùå Erro no pipeline:', result.error);
      return;
    }
    
    console.log(`üéØ Score: ${result.score}% (${result.classification})`);
    console.log(`üîä LUFS: ${result.lufs?.integrated?.toFixed(1) || 'N/A'} LUFS`);
    console.log(`üö® True Peak: ${result.truePeak?.maxDbtp?.toFixed(1) || 'N/A'} dBTP`);
    console.log(`üé∂ Correla√ß√£o Est√©reo: ${result.stereo?.correlation?.toFixed(3) || 'N/A'}`);
    
    // üîç Verifica√ß√£o cr√≠tica: True Peak deve ser negativo!
    const truePeakValue = result.truePeak?.maxDbtp;
    if (truePeakValue !== undefined && truePeakValue !== null) {
      if (truePeakValue > 0) {
        console.log(`\n‚ùå PROBLEMA CR√çTICO: True Peak positivo detectado: ${truePeakValue} dBTP`);
        console.log('‚ùå Isso indica que o c√≥digo antigo ainda est√° sendo usado!');
        return false;
      } else {
        console.log(`\n‚úÖ True Peak correto: ${truePeakValue} dBTP (negativo como esperado)`);
      }
    } else {
      console.log('\n‚ö†Ô∏è True Peak n√£o encontrado no resultado');
    }
    
    console.log('\nüîß M√âTODO DE C√ÅLCULO:');
    console.log(`üìä Scoring: ${result.scoringMethod || 'N/A'}`);
    console.log(`‚è±Ô∏è Tempo total: ${result.metadata?.processingTime || duration}ms`);
    
    if (result.metadata?.phaseBreakdown) {
      console.log('\nüìä BREAKDOWN POR FASE:');
      console.log(`üéµ Decodifica√ß√£o: ${result.metadata.phaseBreakdown.phase1_decoding}ms`);
      console.log(`‚è±Ô∏è Segmenta√ß√£o: ${result.metadata.phaseBreakdown.phase2_segmentation}ms`);
      console.log(`üìä Core Metrics: ${result.metadata.phaseBreakdown.phase3_core_metrics}ms`);
      console.log(`üéØ JSON Output: ${result.metadata.phaseBreakdown.phase4_json_output}ms`);
    }
    
    console.log('\nüéâ TESTE CONCLU√çDO - MIGRA√á√ÉO FFmpeg TRUE PEAK VERIFICADA!');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    console.error('Stack:', error.stack);
    return false;
  }
}

// Executar teste
testProductionPipeline()
  .then(success => {
    if (success) {
      console.log('\n‚úÖ MIGRA√á√ÉO FFmpeg TRUE PEAK: SUCESSO TOTAL!');
      console.log('üî• Pipeline de produ√ß√£o usando 100% FFmpeg - SEM FALLBACK');
      process.exit(0);
    } else {
      console.log('\n‚ùå MIGRA√á√ÉO FFmpeg TRUE PEAK: PROBLEMAS DETECTADOS!');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('\nüí• ERRO CR√çTICO:', error);
    process.exit(1);
  });