/**
 * üß™ TESTE FINAL - AUDITORIA COMPLETA DO PROCESSOR
 * Valida se o processor existe, est√° registrado e funciona corretamente
 */

import fs from 'fs';
import path from 'path';

const WORKER_FILE = './worker-redis.js';
const API_FILE = './api/audio/analyze.js';

async function auditCompleteProcessor() {
  console.log('üîç [AUDITORIA] Iniciando auditoria completa do processor...\n');

  try {
    // 1. Verificar se o Worker file existe
    if (!fs.existsSync(WORKER_FILE)) {
      console.error('‚ùå [ERRO] Arquivo worker-redis.js n√£o encontrado');
      return false;
    }

    const workerContent = await fs.promises.readFile(WORKER_FILE, 'utf8');
    
    // 2. Verificar se a API file existe
    if (!fs.existsSync(API_FILE)) {
      console.error('‚ùå [ERRO] Arquivo api/audio/analyze.js n√£o encontrado');
      return false;
    }

    const apiContent = await fs.promises.readFile(API_FILE, 'utf8');

    console.log('üìÇ [AUDITORIA] Verificando estrutura do processor...\n');

    // ===== VERIFICA√á√ÉO 1: PROCESSOR EXISTE? =====
    const processorExists = workerContent.includes('async function audioProcessor(job)');
    
    if (!processorExists) {
      console.log('‚ùå Nenhum processor encontrado para a fila audio-analyzer.');
      return false;
    }

    console.log('‚úÖ [ENCONTRADO] audioProcessor definido em worker-redis.js');
    console.log('üìç [LOCALIZA√á√ÉO] work/worker-redis.js - fun√ß√£o audioProcessor\n');

    // ===== VERIFICA√á√ÉO 2: WORKER REGISTRA CORRETAMENTE? =====
    const workerRegistration = workerContent.includes("new Worker('audio-analyzer', audioProcessor");
    
    if (!workerRegistration) {
      console.log('‚ùå [ERRO] Worker n√£o est√° registrando o audioProcessor corretamente');
      console.log('üîß [PROBLEMA] Linha problem√°tica no Worker n√£o encontrada');
      return false;
    }

    console.log('‚úÖ [CONFIRMADO] Processor corretamente registrado no Worker');
    console.log('üìç [LOCALIZA√á√ÉO] Worker registra audioProcessor para fila "audio-analyzer"\n');

    // ===== VERIFICA√á√ÉO 3: COMPATIBILIDADE API ‚Üî WORKER =====
    const apiJobName = apiContent.match(/queue\.add\(['"]([^'"]+)['"]/);
    const apiJobNameStr = apiJobName ? apiJobName[1] : 'n√£o encontrado';
    
    console.log(`üìã [API] Enfileira jobs com nome: '${apiJobNameStr}'`);
    console.log(`üéØ [WORKER] Processa jobs da fila: 'audio-analyzer'`);
    
    if (apiJobNameStr === 'process-audio') {
      console.log('‚úÖ [COMPAT√çVEL] API e Worker usam nomes compat√≠veis\n');
    } else {
      console.log(`‚ö†Ô∏è [ATEN√á√ÉO] Nome do job da API: '${apiJobNameStr}'\n`);
    }

    // ===== VERIFICA√á√ÉO 4: LOGS OBRIGAT√ìRIOS =====
    const requiredLogs = [
      { log: "console.log(`üöÄ [WORKER] Iniciando worker`)", desc: 'Log inicial do worker' },
      { log: "console.log('üî• [WORKER] Processor registrado com sucesso')", desc: 'Log processor registrado' },
      { log: "console.log('üéß [WORKER] Recebendo job', job.id, job.data)", desc: 'Log recebendo job' },
      { log: "console.error('üí• [PROCESSOR] Falha ao processar job', job.id, error)", desc: 'Log erro processor' }
    ];

    let logsOk = 0;
    for (const reqLog of requiredLogs) {
      if (workerContent.includes(reqLog.log)) {
        console.log(`‚úÖ [LOG] ${reqLog.desc} - IMPLEMENTADO`);
        logsOk++;
      } else {
        console.log(`‚ùå [LOG] ${reqLog.desc} - FALTANDO`);
      }
    }

    console.log(`\nüìä [LOGS] ${logsOk}/${requiredLogs.length} logs obrigat√≥rios implementados\n`);

    // ===== VERIFICA√á√ÉO 5: VALIDA√á√ÉO DE DADOS =====
    const dataValidation = workerContent.includes('if (!job.data || !fileKey || !jobId)');
    console.log(`${dataValidation ? '‚úÖ' : '‚ùå'} [VALIDA√á√ÉO] Valida√ß√£o de dados do job: ${dataValidation ? 'IMPLEMENTADA' : 'FALTANDO'}`);

    // ===== VERIFICA√á√ÉO 6: TRY/CATCH GLOBAL =====
    const tryCatchGlobal = workerContent.includes('try {') && 
                          workerContent.includes('} catch (error) {') && 
                          workerContent.includes('throw error');
    console.log(`${tryCatchGlobal ? '‚úÖ' : '‚ùå'} [ROBUSTEZ] Try/catch global: ${tryCatchGlobal ? 'IMPLEMENTADO' : 'FALTANDO'}`);

    // ===== VERIFICA√á√ÉO 7: ENVIRONMENT VALIDATION =====
    const envValidation = workerContent.includes('REDIS_URL n√£o configurado') && 
                          workerContent.includes('DATABASE_URL n√£o configurado');
    console.log(`${envValidation ? '‚úÖ' : '‚ùå'} [ENV] Valida√ß√£o de environment: ${envValidation ? 'IMPLEMENTADA' : 'FALTANDO'}`);

    // ===== RESULTADO FINAL =====
    console.log('\nüéØ [RESULTADO FINAL]');
    console.log('==========================================');
    
    if (processorExists && workerRegistration && logsOk >= 3) {
      console.log('üéâ [SUCESSO] Processor COMPLETO e FUNCIONAL encontrado!');
      console.log('üìç [LOCALIZA√á√ÉO] work/worker-redis.js - fun√ß√£o audioProcessor');
      console.log('‚úÖ [STATUS] Worker corretamente registrado');
      console.log('üöÄ [PRONTO] Sistema preparado para processar jobs');
      console.log('\nüéØ [LOGS ESPERADOS]:');
      console.log('üöÄ [WORKER] Iniciando worker');
      console.log('üî• [WORKER] Processor registrado com sucesso');
      console.log('üéß [WORKER] Recebendo job 123 { fileKey: "xxx" }');
      console.log('‚úÖ Job 123 conclu√≠do\n');
      return true;
    } else {
      console.log('‚ùå [PROBLEMAS] Processor incompleto ou com problemas');
      return false;
    }

  } catch (error) {
    console.error('üí• [ERRO] Falha na auditoria:', error.message);
    return false;
  }
}

// Executar auditoria
auditCompleteProcessor().then(success => {
  if (success) {
    console.log('üèÜ [CONCLUS√ÉO] Auditoria APROVADA - Processor 100% funcional!');
  } else {
    console.log('‚ö†Ô∏è [CONCLUS√ÉO] Auditoria REPROVADA - Processor precisa de corre√ß√µes');
  }
  process.exit(success ? 0 : 1);
});